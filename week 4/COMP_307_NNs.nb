(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    479597,       8797]
NotebookOptionsPosition[    463516,       8532]
NotebookOutlinePosition[    464012,       8550]
CellTagsIndexPosition[    463969,       8547]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["COMP307: Feedforward and Backprop for Neural Networks", "Title",
 CellChangeTimes->{{3.8250108627206526`*^9, 
  3.825010880884494*^9}},ExpressionUUID->"834948b4-b79f-46b2-a3a1-\
bcd91549518f"],

Cell["\[Copyright] Dr Andrew Lensen 2021 ", "Subtitle",
 CellChangeTimes->{{3.8250108857919226`*^9, 
  3.825010901807502*^9}},ExpressionUUID->"6fb6e7fa-c304-427d-a124-\
97414b9549b6"],

Cell[CellGroupData[{

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QXcHNW5x/EHt+IOBUJxC8UdgrRIKe7ubgVCKVKgcIFSoEhLsUJwKE6h
xQlFixa3AiFAkOIaLHvPf89M3tmzs7uzOrvv+/t+7nNpkpGzdubMM0fm3Gn/
jXYb18wOmtj9v412/PWqBx644282nsr9YdP9Dtpz9/123WXt/Q7edfddD1x2
p/HcXz7ptl1mfDP3fwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAoP8Yz8WELiaO/jtevsUBAKCrTeJiQReDXSwS/XfaXEsE
AJWpzlrUfH21SPS/J2/Rsee2vrpQx53dxTgVttXfz5HYXjF1i8pRyY+D803f
5vNNkziXzjtHm88HDHSqy5ZwsYeLP7q43MXdLp5wcaeLS12c4mJX83XUpPkU
EwCArrSwi6ddvOPiLRfvudg21xIBQGVqz39gvr5SfOhi9RYd+58u3k0c9y8u
xq+w7bguzjVfZ77tYpSLzVpUjkr+EJXv7Sj2afP5tnQx0vxr03nPb/P5gIFK
edFfubjZxf9cFDLE+y5uMJ8HaXdeFQCAXrC4+fuE5PVyz1xLNDDoWcv0ifhR
vsUBesaSVt7G/0WLjv1kcNyrXExQYVv1Db822H6nFpWjkguC8x3e5vPp2fCY
xPlubPP5gIFGOdKfu3jMxfeWLacRxncu/uVipQ6XvRFTWV+7Zzrz42wGuims
tD04cb7FAYCetpiVPyPYI9cSDQxHWOl7/ud8iwP0jHbmNh4Ljlsrt3FNsP0O
LSpHJecH5/tNm8+3i4sfEue7vs3nAwYS3cOe6uJbS89ZfGO+X9grLp5x8ar5
vhqVciDa/rfWveNUlMf5t/WV91MXv8y1RN0hmSNXnmr3fIsDAD2N3EY+jjRy
G0Ajuim30el+G+Q2gP5BeY2zLT1HoTFxGg+nMW4rmh87PMj8vDfqm6GxYurD
9V7KvsqTaD6OSvVWnpTbeMT6yvqZi/VyLVF3uM763hPlrchtAEDjyG3kg9wG
0JhuyW2onX6W+fuQEVFs0qJyVEJuA+h9E5nPXYT12NcuznAxm9XOTWgeoLlc
/NXS+32c3I6CN4ncRjpyGwDQOuQ28kFuA2hMt+Q28kBuA+h9mscmzEdort6N
Gjzejlbeh0N5kk2bLmlrkdtIR24DAFqH3EY+yG0AjSG3QW4D6FXzuHjdSn/H
n7vYsMnjbuPiq+C4T7n4SZPHbSVyG+nIbQBA65DbyAe5DaAx5DbIbQC9KvwN
K1q1lvPhKcc+oUXHbgVyG+nIbQBA67Q6t6H7gPlcLO9i7ShWdjG3tf4eQXOB
L2R+bq11zK+jtqz5Majjt/hcrdaqdVImMf96l3Kxpvn3ewUXgy3bmF2g1/S3
3IZ+p/r9rm7+dQwxP3dg2jqArchtTGu+3h8SnW8NF0uYX5sx1Ircxjgufmy+
blYdrTpK14cFXUzWwPFqid/Pn5l/fau6WLRN5wLqoT4UH1rpb/iflv7ba8SU
Vpo7UGg+oJlbdPxmheukKLfRqnVSprbSek31qeqBH7fo+O3UqtyG6lqtIat2
sdrd8fuga+b85t8jAOjv6sltaC3yy8yvDfB3F4dYXw5B99iaR+9qFy+YH/v5
dRQfuHjW/HqJG2Qsl+rmYebrfIXWSYvXNZvJfJv+VvNro+n4o1186eId82ul
XeliC8venp0m8dpucHG6i1ky7hs72sWN0TF0T7Ri9Pe6nu8Z/ds10b89Z6Xv
udZ2+1v074qbXKxf5Vxqw2jM7s3mX++b5l+/3u/3ouM94eJiF+saOQ70H92S
29Dv+mDz9/vXRrFqxvNojRXd45/r4nHz9x9q52sM/scu/uviH+br2GkT+zWT
21Bdf5KL+8zPe/pxdD71hx/p4t7o3+dP7NNsbkPPZLWeg+qiUS6+MF9Xq456
ycUd5p9Zz5DxeMeZr5+vi46b3E+5kzOjc70dvS6tianX+Vp0rgNdTF7nawBa
5Sgr/f3qmr1xi8+xrYsxwXl2q7DtHObruLjdc6LVf//7R/P1gn6Tl5qvZ2Jq
Q50RHfua6DwfJcql9U4fiMoQ/7vaYbMH59Bzm6ujf9e5Dk78m3Kkf3Ax3MUb
1levqT5Vvar69RzzOdzxMr6mJayvTlfZ9SwqLddcidrFFyTKq3p+7ujf1HY7
1vrag2r3qb6K3xN9dqrD4vdEofd20RrnXNx8u/UhFy+bbxer/tM6u2ofql0+
3HzfnrnTDwEA/UI9uQ1dB79LbKc6X+1+PRO43CqvuZ4M1bVqn9d6TrGa+To5
3u+FaB/dpz+f4TwKtcnvNJ+7r0XP+pJze6ndvUCG/ZIeSOyv92Kb6O91nRuW
sczJ+HWF8+xg/t7kuyr7hu+5ru9r1vl6gG7ULbkNtZNvCLbfNcM55jRfX462
2r9d1WGqi+I5Ac8L/j1LbkNt6WOs9J6iWijvcES0787WWG5jcLRtlteotvyL
5uv2Wh5N7Kfrlt5LfT5Dzd/LZHk/9RkvlPF1AK2i9ovyh8nv439cTNji86id
9nhwngcqbLtYsJ32m7XO872S2F+5y2RdrDbUy1b7d5kM5XvC+/j9g21U76r+
3dvF+xmPq+c+F1l53iTN+sG+yov+KMN+Ma2Dk6yPlNddNvo3PZu7P2OZk7FW
hXMpf3SVZav/4jpQ1wKt00M/DgD9UT25Dd3/f5nYTnl0XSfus/rr6dPMP/es
ZBUrbYvrmqvnGx83cC7tU2tMp67nXyT2Uf5kvhr7hO5O7K+8wxbR3+safEED
5T4kOL76G6qv4ucNHCt+H1rV/xPISzflNq4Jtt+hxvGXMZ+rqPe3q7ppa/PP
H5N/Xyu3oXb0Pxo4n+L/XOxlpTnULLkN1TFvNHA+zYO4d41jJ+8JtK6ExuOd
1MC5Ho3eG6BT9IxFz8+T38Pj2nSuPwXn0XlnS9lOOcjk71vjReodv/JsYn+1
TZL34OoDVm9992VUriTVQ8kc6xXm64of6jy2Qn1mf1rjNf0i2EfjhuoZ06Z8
VTLnov4jS0f/NqM11mZOezalduutDRwrDvUrmbbsqADQ25rJbWg8xMWJP6t/
gO7v1QdRYzA2N39//k8rr1N1n71IlXKtYqW5DfXZezXxZ13T1PdOzxfVP0Lj
YXTfr75/76acT69xjSrna2duQzmc35q/pj5pPk8zKqV8T0T//mR0/u2D4+tZ
wqfBfiqzrk8HRudT/kfvg/pmv23l74PaId0y9hZoRK/mNuY13z8hrS5U7lPt
d9VjW5nvc327lfZ70P1J+Ay0Wm5DbfEbU86n/mkaU/gr83WG+oRoXMglLj5J
bKe65mkr7c9WK7eh+5q0tSjvMZ+DUJ22k/nc9oNWvg6mnj1uVuX4ydyG6tCj
rLTe1vg8vZfqx6Hrz17Rn5OvK479arwWoJX0fQy/g0PadC79zpK/Lf1G0sa4
tju3MYf5OkPbxG2bZBtS7TiNF3s8+jf1Y1G7LhwzEeY2NGbvHSutY5TDjes0
1SHq63G1ldYPyXpiziqvqZ25DY1//qv1tQfV7kvWT+rHpjGC8Xui0Ho3y1op
9SO5KuW16RqjMdxaF1jtQV1P1Af4Nkvv61upfzAA9Kpmchtqd39jfbkAPa9T
nR72x9Dfabxn2Cf6L1XKFeY2wvavjjdRyn7q26BneX9P2a/as7p25jZEYzUn
j0L3RMcFZTsv2EaR7KuqfcJcv8q4oqWPIdX7oOcD4fMbxYF1vi6gm6TlNlZv
0bGTYx5amdvQuLS0PIP6is9j6b9h7aM29qsp+2XJbYTzFSvUn2ItS59rWfW2
xq7fU+V81XIbqnefDrZXO1v3VGG/e9VPmqNJ92Dhs2y16yuNB0zmNjTuL74e
6Vqh92JKK7/+6Fy6L3gmOI8+63rnVAIapXFhye+f+inN2KZzqV9C2H46ImW7
duc29FtUTkDtGd2L6/f5eLC9cj7jW1+750dW/hsOcxvJUG5EcxRXqkOXCcoY
xxUp54m1M7eh+mhS63u9ascm26uq15SXmcBK24Ph69vIfE4nWU7lNKapUia1
q8PrifLlWec7AoBe0ExuI46HLdsa6r8L9lP/ikr3DZVyG+qLUO25XkzXR+XG
w+vhURW2b3duI1TvGrBqg4fv/c4ZyqT3N8ztx/OkAL0oLbehZ/N6Zje0iVBf
ifA+u1W5Dd3Dh30UbrFsc/hrXrvk2gJZchtLpLwW5RmWz3A+1YWXVDhfpdyG
7hHCPGrW64Lur54K9q2U904bp651J7KMtVO/vXBM+soZ9gOapbpC3+nkd095
wHbNa6v2T9hv87SU7dqd2wilrQGb5bdbKbehfh5Z5lNTPXRnsK9ed6V5XNuZ
20jTyDopxwZl1Jx0ac/7Qqta+RwlP8uwHwD0imZzG+o/t1rGc2kMSrK9rX54
leatSstt6N5gz4znEs3dFY5F1DPBKVO27fbchq7fyf7p6ve9UsZyrRmcS/3u
08beAr0gLbfRrmhFbkPtzXDOUfWfqOc3qGePaWPtKuU2DkvZttqYvJDmmAvX
kqyW29B4m+R4OdXta9dxPuWrk/Wv9k/ru5GW28g6Z4HuTa4P9s2SJweapTpA
8wcnv3vDrW/tt3Z4LTjf+SnbdENuo9ZcaJKW21AbKGvbU9SeC/ss/KPCtt2e
29D7GM69dKlVn8Mupu9iWA8elGE/AOgVzeY29HwvrX9zGt0j/Cexr45Vqb5P
y23oGlrPXNWypZX229N1Y4eU7bo9t6H+3l9Z6euoNe9eTNdkjS3XWBQ9m9Z4
d+aPQq/qtdyG+kqEdezxDbzus1LKl5bbUO72P8F2apvXex+1Xcr5KuU2/i/Y
7tw6zyVh/7K0PvRhbkNj1uet4xwnBPvTpkcn6Boczjumdd6zPGdvVFgHXGnl
9769nNu4rM5ySlhPKV+8Qsp23Z7bkHAOZX0OWceW6LmY5sKL24SrZNwPAHpB
s7mNTStsW0lyzgjN1ZE2v5Wk5TYOrrBtNRrTnVybVTEsZbtuz21oLo7wua2u
l+qHP0Wd5QR6Wa/lNrYPtlE9U+/60qK+xB8Ex0rLbWj+jjEZylWL6sRwbtVK
uY3kPCWq17epsF01OwXnui1lmzC3cUmd5zg42P/UBsoJ1Ev3xRqDlvzuaY6F
duY2wrlvLk/ZpldzG6pD16mznKJ1/cL27j4p2/VCbmPfoIzxd0pzC41TR1kB
oL9pdi7RevoESnJ9d40x2bzCdmm5jSxjt9P8ITjOv6x8nGu35zYkfOao0D2M
8kW6x9H8YepDw3UN/VlabkPjEtZ1sWEToTxr2Ge5FbmNU4Jt7rL6+59ZVI7k
PHyVchvhegzqm75oA+eT04NjpeU2lEtJrlmg68nC0b+NmzFE85gm5yTR3J+z
B+cKcxsn1vl6Dgr2z1LvAs3Sva7GDITtkHaOSRkRnC+tL1Wv5jZGWPb+wkmq
s8P+M39K2a4XchvKj78SlFOhsToXmX/uOL3RHgQw8DST2xhh5euQ1xLmNiqN
dw5zG7pOTFfnuWK7WOnr05x68wfb9EJuQ/OJVloXXTkO5Zq0lrzW5dVnuHS0
T5YxmECvSMtt/LxFx271GrB6LntdsI3mPW2kXS63BcdKy22E66PoXqLSvEa1
hPN2pOU29N4n5+jUGMDh5nM49cQ95tv1yZxMeH0J10nZtc7XQ24DeUiba1ft
kHb1udR8OeE686ekbNeruY0H6yxjUpiv1Zwb4efQC7kNUf2XtsatQu+X1hdX
m1tjcZS7V5u2kbw6APSSZnIbGus8T53nazS3oTXAG20HrGalr0/z+C0RbNML
uQ3RmuzDLH2d8jCU69BzXs05pfnAuaahP0jLbfyiRcdudW5D7eG7g20amWsj
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
on7EWcdTx5JtU7WZK80NuoqV5jY0VlxjDJVDeM6y192vm3/eUKvPY0x9ss+o
4/jJ8THHJf5euY2tapxLzzHDMfjJSOtnojky9CwnnKsqSyg/1Mi6aUA3aWdu
IzmvnqJWbuO6YPudMpxjcMp+tULPS/XbPy/4+7T1C0NaI1B5keRcwrVCzxzn
jl5PMpeaZQ5jvV/Kj9fT5ta9jp7/1qqfHkrso7qz3rmlhwbnPavO/YF2UF+t
YVZ5LFitUF8NfZfrWbc+SeMYLqnjfMqhxPfayXnOldtYu8a5JrXyHG0ysuY2
VP8qv/FeHeV+NEP5kjQvRbUxgWnHj8c935j4e41JWabKedSHp1Z+qdJ4GPXl
0Timer876i/zB/PtagDoT9QHWve8ukcfYb4OrrS+qOaDUH+2N6Lt9DxwUJ3n
073CqOgY6kOwboXtVrH03IZo7olfm78P0TbKt6htrHyC6mv1uVYfx6PMzydd
L10z1Z9P66Z8GB1T1w1dW9WeVr9Etds1l1ayLaE+H28mXluttc10PVO/Gd13
3BG9Hh13hPm+59XmytY1V9d19UtVbkp9J+P3QWVVW0fvg95rrQ/2M6tvDTOg
W6ndq9/HiCjUtq1nDZBq1Pf3rcRx/2SV+3vFay6qLnwjik0ynkft+42j8+n5
p36vyj38EP1Xf9ZvV+O3lbeJ8yu/j8oXn2+vjOdTnaa5hy+M9lMdprosri90
P6F6RLkD1TtTRPspd6A6aWR03nMynk91m64XmjNZfWE+jM7xbXRO1amqu/Ue
q+7TnBtZnh2qn8zbUXnU/6XenNYu0TlHRMc5ts79gXZRPaP7VI1P03r0yhNU
6t/wffTves6j9WOV762Ug81K81DqeYzWMdFvU7/R76JzqW2hOkM5Dd2Dz5HY
T890VDeMjMqzSoZzqf5T+0jjXtSXV8/JRkTHUBtz/mD7MLeRnI9Hbbw/RmVT
n4xkvaZ6VHXPA9Exqq0ZU4medylXqzal2lR6L5Lvi86pscyHJ46v+k915VtR
aHzRojXOo/df44ovML++jc43wvrel2rrTmnuFeVUhpmv1/T56fsR17fx56e/
VztT7ed5LPvcowCA5lXLbcR0b6H5JbQ+udrj6tu5vvm+KK2qs3XdVJ5jR/PX
RvWB1jVmimo7dZDaQ5onRPctulfS+7C9+WcTau+krW8GoHvoPkH39uonvVf0
X/15pjadT7lh1a+qy9RHbwfzOeZ6++BlpXp6gegcqpt0n6A6dbGoLABKKc+3
uovdzN8z6zmK7nl1D69xaGrrrGTtG0ug36vaVZpbTHWEcrZqY9S7hkurVMtt
xJTb0bgP5WPjek3r0ei1tGLedNVjyk/ovdD7r7aW3iOt+Vpr3tdO0jMszWuq
a4jmNFI5VWbV+coZZRmbDQBovSy5DQAAAPRfWXIbAAB0M3IbAAAAAxu5DQBA
ryO3AQAAMLCR2wAA9DpyGwAAAAMbuQ0AQK8jtwEAADCwkdsAAPQ6chsAAAAD
G7kNAECvG2J+LfH4WvaskdsAAAAYSPa20tzGtfkWBwCAuq3o4k0XX0XxbxdT
5FoiAAAAdNKuLj518YWLr11cmm9xAACo27Qu1nGxYRSruZgg1xIBAACgkwa5
WN/62oNL51oaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIJvxXIyTdyEAAAAA
AADqtKCLa1yMdDHcxZA8CwMAAAAAAFCHWVw87KKQiHdc/DTPQgEAAAAAAGS0
sZXmNeI4Ms9CAQAAAAAAZLSbpec2TsmzUAAAAAAAABntZ+m5jf/Ls1AA0KRZ
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
pulauKiLjc3nJm538aGVrhHWSHzt4jHz18sdXaxgrDPWS/S9UF/8KTt4zolc
DHIxaQfPif5vHhe/MJ+nvc7Fmy7GWHP123cuXnIxzMXe5vt2z9Kh14PmjWv+
mfV05nP6naA8/4/N33sCraJ6R/WP6qFh5usl1U/N1G+qH1VPqr5Uvan6c54O
vR4AABqhfhV7mu+P8bqVrgnWjvifi+EujnOxhHWuPYn6aM70480/y1G/nOEu
rnSxg/ncQz1mdLG7i2NcrGHVP/N1XPzd/DNzPV9at85zAUnKyWkO0IvMP6NU
rrWd9dtn1pfLXdPoz9GtlFfY38VNLv5tvp/O9ebv36av81haO0ffMdVvW7mY
sMq2g11c6uJxF/e52MvF+HWeD4ipfvm5izPMX6dV/7Szfhttvq/uxS62tM4+
8wAAoBKNN9H1ULn49y0lnzHJJJMUZppppsIiiyxS2GCDDQpDhw4tnHvuuYVb
brmlcO+99xaeeOKJwssvv1x49dVXC0899VThgQceKNx2222FSy+9tHDMMccU
ttlmm8IyyyxTmH322QtTTDFFYZxxxql0H6CxLXuYb0+S5+gO6r+q+cX0GX3j
4mPre76t50Dqv7pgxmP91MUzLn6wvn48u1TYdmcrb5t96mKtRl4EBiy197V2
61nmnznqO1xS90wwwQSF6aefvjDvvPMW1lprrcI+++xTOP300ws33nhj4Z57
7ik8+uijhRdeeKHw2muvFZ599tnCww8/XLjzzjsLV199deH3v/99Yddddy0M
GTKkMOeccxammWaawnjjjZdWv31l/j7gaBdzme8jgPwNMZ/nUp2mekn1W/x8
W9fCEeb742ehvO3frfT5uO4z065lK7l41cq/J4c09CowUKkeUX1ylPnvseqZ
ku+U6qOpp566WD+tssoqxfrqxBNPLNZfqsdUn6leU/2mek71neo91X9nnHFG
Yd999y2svfbahfnmm69YT0444YRp9ZvqVdWvqmdV31bL6QEA0A7qe6t5MO62
lHzGbLPNVlh33XULhx56aOGaa64pjBgxotCsjz/+uHDXXXcVTjjhhMJWW21V
WHjhhQvjjz9+2nXyZRe/sez3zGiPw8y3+fX9uMzFiubbUc9Z6eelnNSsNY6l
e8y7rfyz/qeLyYNtNa/LKynbKjQ+inYTatF3SvekV7j40oLvkXIQq622WjGP
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
a665CjfffHPe1VPT1L/89NNPD9dV1HP8nfN7u/sd1WNap2SOlH/7raXnKH5b
45hpa78qDs1YJuXn34j2GWbV+02Icg0jXJxrfm1a1dVxvldjbH5mff3r1Hdk
8wxlGJ5Sfq39rfvPH4K/V32e9v6hNXYy/7svvt+qD0477bSuHn+S1S233BKu
GaXvl34/5MkAAGk0LkBjiIvXDc3FedBBBxXn5+xPrrzyysLMM88c9v3l+WZ7
qX9scmxIHFpnoNozTeVK0tZ+fd9q99eOqa2n9rWeba5aY1vluTS3h9bXfD0q
35kuHrPGcxvqN/KR+bEn1Zxupe3/Ges8D6rT90XPqsd+jzbaaKOunjeoEQ8/
/HBh8cUXT/5WvnHxaytdrwitpZzo2PFNidCcGT+pse8DKfspwjF9lSzv4p1o
n1/X2HaNqExnWPXn3RpjEo+TUV63Vh55uKW/hjhU96rfm/I1U6UfAk3S71s5
8rHXWa0bp/qgP1F9vfHGG4ffrwste3sAADAw6N4zvn8rTDjhhMVc/7fffpv3
pawt7rnnnsI888yTvDbq3nPrHN///k5t7rQ277E19lvdyp/7Ke6u49zx+Cqt
S1vrPkP5BPU7X8fFoubbi5rrL56XtN7cRvKZ6gvRMStZ3Upf4y51nAfVaZzP
VZZ4f3fbbbfimof90auvvlpYddVVw/yGxnDVOx4L2Wjsf9r6TxqDUW1eCdVH
I1L2U52Rte9WPH/pJ+b7XFSi+TMutL7+cmnrZycl50Z6oMa2/zLfB1J9QYZH
+yo076rm6v2V+Xmm0R76XR9n/nde/MyGDBlSrAf6I9Xbe+yxR/ib+ZsxnhMA
4KlP/Nj+GlNMMUXhwgsvzPvy1XYaZ7PIIoskr42aN5X5qdqjZP0563uW99Ma
+x2Tsp/iqIzn1TPC+LnoBXWX2lO/khutsdyGxtIn56g/qMq2ynu8ndj2hEYK
izLqrxzf0xXGG2+8wtChQ/tFH+1q3nnnneLcz9b3fdIYgYNz/Bz6M80ZlFZP
7VRjP/UX/DJlP43fq9afLabxJ3+2vtxttXmSlaO9P3EOzQMSjh1MujKx7Qjz
c55Wojr2ouh/65iDzI87mSk6L9pL1xX9vouf1wYbbFD8/fdnqr8POeSQcIyx
voP0TwOAgU3rYf7TomvDdNNNV7juuuvyvmx1zOuvv16cg9v6ro16XrZyjp9H
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
C8Mspd0aheZjVjviUPPjS/OisTJvqkzjjTde4aGHHsrlupLFqFGjStZb1TW0
m+iZg67p1vcZr53j54rO0tx7N5v/3HUfvUnG/fT7u8XFFy5WzbC95lb9IDqP
1nncu+6StobK/S/z8/JfYf71duv8a/HnUvjLX/6Sax3x9ttvFzbZZJPkuiNV
Q2ME1d4/6aSTCt9++22uZVfbf9ddd02W76g8Pky0ldbKjvsd1upfqpzm2N+W
izvMj1EJTWV+LMrlVjsPqn6tr0XHe93yydvGdB/wofl1Z/Y036+lG2kcffEz
2GWXXYq/07yob5f6xlmGuq1SaE3WvJxzzjnJsvyjsx9jz5nOfD+tkeZzkHqe
0+15wJ7kGpQjq+Qrnk1sV2tcysg8Xwf6jcusdl2u+yA9IznffN/LTs/LsZFF
69AtvvjihdGjR+d2Xall6NChJe9dt+U2JCjjmR3+LNEZap+r37XWn1WfbY0P
15hw/Y7jz/7v5vMQc0XbzWl+fYM0c7gY7uJJ88/gKrUPfhJtp+Nrjcg/Wn7j
ApTHuMf6Xq/qkFddnGD+GUK3zC+kNSpHuCjMMMMMheeeey63uuGVV14Jc59j
Y/zxxy9MOeWUhUkmmaTitWKPPfbIfRz9FVdckZxTVPNNTtvxTxTtpnWXlD9V
/wnNt5H2TFZzc+i5TLyG7fPm8xKVaA6O/7q42vyznLRjam2rZ6LjadsVGyt+
y5xppe00zaE7zHwOWn1uu+FZtX5/d7oo/i4vu+yyXOuHo48+uqm8huWc23j+
+ecLM844Y1wWjaFatKOfZm/Rb0BjE+P3S31PNfZe6/Vo/afJ8ita/+He2DVq
5CvGzhGaZVzKGNZxRHN03bvK6qvXfzA/96j6wmVZL6EV/hSfX2t9dCOtZXbY
YYclx0J2bW5DY+cT5XzBemedHGQ3pYtHzPe1+Mh8Hyy1fTW/5+fR338b/Z3G
jas/tsauV5sTb3bz812qD5XqAN03aGy61vdYL/pzPK5d4522t3zX4glzG8nQ
+3Cbi31cLGT5zsug96k4HmXjjTfObSz3Z599Vthwww3L3qvBgwcXDjjggOLz
wttvv71wzTXXFMehaM3VsL4bZ5xxcuuvHRsxYkRhgQUWiMukMem0/fsf5S3U
BtHzQF3DlENVf441Xfzc/NracX8N1X+a/3hQhuNq/N2tLl4xv5a31rD9mfn6
TWvYqu7T+k8aCzNHi15LM5K5jbCdpnVcdE+hcTZ5XuM1HkDXl8L8889f/H3m
aYcddhj7Pk0++eSF9dZbr7D55psXNttss0yh7f/617/mVn7NgaR+ddaXz9ox
x8+224W5jWSoDaT+qKpH5rfuH7fatTSOpEauYvFg+1rjUq7M67WgX1B/Tq3N
2EjuWs9CXjSfd9CzjHY9H9C90dj7k9tuuy23a0oazaP34osvllwvk9GNuQ1d
G2eeeeZkHrvasyz0Jv22h7hY13xbX3Pxamy2njOuEP135Wgbtd3Xjrat9V3Q
71G/9+PN/y6VP9HzS/UH0TND9Y3WGJRZWvhaGlUtt5G8B1D/cuV41T8sj+c4
J8XlOeaYY3KrFy655JKy90e5lkr3IsqF6Bms+nIk91looYWK/T/ytM466yTL
lHXsFXqP6hnd211vfv0U5TpUD6lPx39cnOpiWauvfaI6YBfzfQ2Uq9W6pVqP
Re0dzfu1Sp3Ha6dKuY1kaK5TjV3QmJVaa8q0w8bWJe2hDz74oLDaaquNfW+W
X375sfPSa46jrJHnmBrRM77E58v6w5VVy23Eof6lasOoD/svjTErdcs6HiWx
fa1xKZ/m8TrQb2ieHfVLbyS3kQw9A9U4Vj3D1bzNrcx/LmLR2Naf/OQnxTxC
Xr7++uvCCy+8UHjwwQcLt9xyS+HUU08trLDCCsW5OfW8Mu29yftaXknwfJa8
PxqhZ6cawzJtFJNHf9ctsuQ20to4J5rP33RizIrG/qsPTLEeue6663KpD1S3
LbvssiXvx9Zbb52pD4nW49acG8l9lSfJk3JEifJkmW8SvU39rpST0L2Mxthr
/gzdozTTFpkwOs500XEnbfJ47ZAlt5HM477n4q/m+9p1aqzWaXEZNB4kTxrP
Mffcc499TzT3h/rc9prrr78+OSd8pTlkkC23kQw9s9U6TPGYlW6dn6tr1Bpj
khyPknWfaL+d8ng96Bd0X6L+l83mNpKhHJ3qhSWtNf3RNzPft6DYF/Dzzz/P
7Xry5JNPFmabbba63o9uzW2cdtppyXJe0ILPCeg29eY2kqExPOqDcoD5uQLb
9ZxW86AU1w9Qmzuv9QMeffTR4jzN8evX2ijDhw/PtO/HH39cWHHFFUvev913
3z3XZ5t33313cs6NJ6z71jQHWqGe3EYYmmPxKPP9+No1dlDH1fjE4u/xrrvu
yq1OENVpiXqhOP9xL9J1Yp555olfh64f87fp8+t19eY2kvGl+XFtGrc6X6cL
3isy9MFYvMJ+jEvxNLeTxj+qn8FN5vsQX+ziXPP1u8ZTHufiSPPzS2nc+G7m
xzJrzOT65tcuHGJ+/jy932qzas4Izbmn3Hz83HGCKMaPQs8Exo1iHOue/ojN
0u9ec621MrcRh/qFqp/ohtbcs9yD42MefPDBuV5PHnvsscKss87aL3Ib999/
f7KcDzTx+QDdqpncRjJGuPib+b7Vk7a4jMvH51H/6LyojZ98zVr7NSvlMDS3
XnJ/jQnJc07RTz75pDDFFFPE5dF8MpXmyAV6WTO5jeS9sZ5xad6BVo9ZUZta
v7/i3BbKg+YpOe5Ofc3+9re/5VqeZgT55BVa/Ln1F83kNuLQnCaag1xrKGne
HeanS6iWo0gbj5LYr2pOJNp/tk6+lhzMbP7ZSyPfSfXD+z4KPf//Joqvo/gy
Cs0rozn2NM5Hdb3mjNJ8Uk+7eNTF/ebHXyqPd435sVl63n2W+TGdGn+uvje/
Nv+sb3fzeZUtzK87pLyK5q7WvE5Lm+/zvJj5eZaUY1FecB7z6wxozr4fR697
BvN9B9U3UtcJ9bucyHzOpdkci/I5wzO8j82E3n/NT64chXLL9T4/G9uf8fTT
T8/1WvL0008X1zqcZpppiusZhKG5q9WeTo5P6dbchsbWTD311HE5n4u+C0B/
0qrcRrIu0/g4rbOiOQdbcb+8TXz8bbbZJrf6QHPkJV/rcccdV9f+J5xwQsn+
GquneX3yon7miyyySFweXe+ZTxT9UStyG8n2suYp0Xp4mqNphhaUT+1b9YEr
LLzwwrmvEX3ooYeOfb16TvXwww/nWp5mbLvttsnPbtsWfFb9UStyG2EbQOus
aF7hTo1b7VquwjigRm6ibDxKYt8s41IO6OTrycFB1t777zxCvxHV+cppa31y
9XPQvFXKp+heU/NgaZ4+5VTuNp9XV3+Va11cYX69gvNc/Nn8HOGaj079VvRd
+k30nu1rPhe/s/m6T3kWzZenOQM13lJzrD3bwdesObnUz0Z9aLLM16M8TnGu
U40tvPbaa3O9lnzxxRfFvtvq8/DAAw+Uhfp1HH744cW1EuPX3K25jbfeeivZ
9lcej7Y/+ptW5zaSEY9ZOdD8OiuNOiY+Zp5j0ZNzbWhsSj3zZWhuPY1BSb4/
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
S6wg0bX+0wYxjcU+jksvvXRhypQpVn5L4lItvo2ePXt67/veFu8vIWlRqm8D
/oxXRfeN6yjZxJu2UXoY52/ZsmXhzjvvzHwsuOaaa7w16Yp1m3/99deSj4O+
JN7jLLXUUtb62vpiUc7L4D4SYoNSfBvo44S5FJ6HbpLdWtW5rg3HH3985mMB
8uw8tcWKKsfHgnHSewyM11988UUKFkczduzY4vkdW8YrLZjRvaw2SvVtoI4W
fHF4T0cNjXL6O9Yc8Ftk5W9gXgpJgAGin2f0YUb9jBNF51nmCcSAo6ZVcex5
+OGHrfyWxKUafBs///xzYfHFF3dtRExMR2t3l5D0iOPbQJ071Di/RHRPbBv5
s2e59tioJ/ryyy8XllxyyUbrkZdffnlJx0B9i912263RZ7vmmmuW5SNJAk8P
KGgHC/eUkCyI49tADY0xouN0beRmzanrttVWW2U+FmC+46krXNQBBxxQ0jGQ
47bppps2OkaPHj0Kf/zxR0pWmxkxYoTXlrMt3NNqIY5vA73OXlO6QGkToT+j
CcgDifA1PJvgueLkpbyb1PlITYK+nycrbSh6/TCvzOnhfsIJJ1j5LYlLNfg2
Hn/8cW/NP9QSsB2bQ0gamHwbiDcdKzreFOszNnNo9xGnl0CfPn0Ks2bNynQ8
QH0/X+52sR8A+gLE5eqrr25URxQaNmxYilaHg7qonTt3du1A3es0Y+4JsUmY
bwPva1gTOlR07KvNnCw8f3gOCyuuuGKxLk/WnH766Y0+n9atWxfuvffe2Puf
d955TT5jWz1S4KtBXo00+Ob3tXNbqwKTbwN9Tm4VnfeOnJO6rKMRBeIxYvga
RiR4vrh5KWsldU5ScyAmohqe5+1E1/AuxhbaWguMQzX4NgYPHuwd3xmvTWoV
v28D/oxXRPc56Sj5qcGAd4+PlYr53DbyOG699dYmcz+sdSKe2wTGYuTRtG3b
ttG+yGtB3xUbYAz25MYwXpvUMl7fBnJO3lM6X3Tf1jT715UCnj88h8XnEs9n
1rzzzjvFnGbxjFGoV4EaGiZQd/Tmm28utGnTptG+8AV//fXXGVnfmLfeestb
9wMxOStZuq/VgN+3AX8Gck7+I3pNo5k906qDmHEUifoZYualJOZPIcQSrZQ+
VSo0a9asMGnSJCu/KXHIu2/jm2++Kay11lqufagntqXF+0pImiD+Gr6N95Uu
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
8QTjyujRo4vjDMabLMF4il58Dz74YGGrrbYqjre+60UO4umix2dCCCEkabDW
10d0PYpG7x+o87T++usXTj311MKTTz5ZmDlzZmq/h6hpit6N6Oe60047+XsD
uHpTdDz7whVeM967jhBPb4UAoa7VYOGaAiGlgNqW6HVyhdKXUv583xX8EptU
aNO6omNGZviP37Vr18KQIUMK999/f9HPkRZYv/zkk08KN910U2H//ff39wZw
NV103YwOFV4vwD2YFnAOV1hbHiXsgU1IKWDugPEI7+ZTpPLxDX7Ggyu0CePF
uaLHj0bHX3LJJYvjDcYdjD9p+nExfsJfjPEU46pvTQrC+Huj6PGYEEIISRvk
ayAWArWqfhffb2Tbtm2Lfo7+/fsXrr766mLeSiW/k8i//Oqrrwp333134cgj
jyzGUgbEaLhCLiryxMNq6ZUDfDr7iHm9BfHbpyZ4TkJqlaVE5zo8q/SzVD7n
dzUmIftQbxNzauR2/+g/T6tWrQrdunUr7LrrroXzzz+/8MILLxRrYFTCjBkz
Co899lhhxIgRxZ4GmO/78upcoY8J+h6uJMnWwkDc+scB5/O+V6GOSVhvBkKI
BvMjzBdQqyyoP3W5ekPKj8/ygnED4wfGkc/858G4g/EH4xD6SmNcwvhUCRgf
MU4iZxjjJsZPjKMB14jxFuMuxt+WCVwrIYQQUgr4jVxb6WrRsY5NejKiFhR+
w7D2uPHGGxfXBc4666zCmDFjir4K9GdFPgt+9x5//PHCuHHjir0KLrroomI9
j2233baw/PLLF9q0aRM218ecG3UvEEuCOqHzpXi9qK3xdYANXl0iej2aENLA
gqLXMNGDNE6vk1IFH8lqKdiNXBn4LBEH9pP/vPCvIo4a+eGo7YlccbwPXHvt
tYWxY8cWxo8fX3j66acLL774YrF2B2KvkeN+5ZVXFoYNG1aMO1tllVUKCy20
UKFFixZh14acEdRTPUxpkRSu0WVl0e9Pps8ZMfXtU7SBkGoE8441RMdoTBdz
HfJylUbuK2KxkAuI8SXQD4NxCeMTximMV0OHDi1cccUVxXEM4xnGNYxvGOcw
3mHcw/iHcbBv377F+mcYHzFOhqxHYVzF+IpxdvkUrpEQQggpB8y5kbt9jdLb
Sn9K8r/tXmG9AXEj/1HqksH1uaA3yicGuxC/jR4rYT1mCaknOovODUMtuzTH
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
DHKbPf1SkHfHXItSovg2vEKNW+SsIP6F+YtRyIVvA8BnESV+Y3KPgXk+IlJc
YL3+Pcnct+EVeqzgOj5XaTul6jkeY3fR8SLWQQcdZNe7MMG9995b5rjxnJs+
fXqkfX/77Tc7VsO7f7t27Yz2F7v++uu94xmd43NGSBLI1Lfh9fdhvnOz0j6S
33rryJWeg+9FLc4vvvjCmE1IB/y7bq4H+qKglqg3PiJJvo3nnnvO7qXrjA01
5VhLjhQjmfg2vPbtT6UHRMc0Nc3j+KoqTcP3In7VZNzt33//be22225lfgvk
n0Rh3bp1dt1R776YQ5kCeT2wt85YUEeK69qlZOrb8N4X+C1vUtpbzOeqJpdc
+TaAnZ/CmqIkp2yp9IFUzLfhFXIqx4vuJZur94H/up+P+AcT4LnWs2fPMseK
eqKovxGVm2++ucz+m222mfX555/ncdThoE+6ZzzTcnSuCEkS2fo2vELsqpuz
ko9+ou3d72rfvr1ta5IIegN4Y7nx/xcsWGDtu+++ifRtYGzox+2M7Q/hehwp
TrLxbfjf5z4W3Wels+Q+Bhd9WxAvYsd7YZ3HFE8//XSZY0ct0Uz6uk6cOLHM
/sivWb16dR5HnBo8Jzp06OAdz545Pm+FTLa+Df9zHzkrF4nus0K85NK3gZgM
+jZIbtladMxFrnwbrhBn8aHSYNHrkhXJZbvR/VzkRJrgn3/+sddU3XGgD+2E
CRMy+ow33njD7pnufgZ6p7/yyiv5GXAE4Pf31Nr+TJLVN4KQXJAL34b3HQC+
22dE91nJVR2yXu53HH300cbsQTruvPPOkrpBqIeMenzwY+yzzz6J9G0gF7BV
q1bu2FBvL876UITERUV9G17BB4G6fainlqsaXK2UVuHzW7Zsad+XpjjqqKPK
HO9VV12V0f7wyzz88MN2DO+4ceOsxx57zGg/2N69e3uPp3eOzlcxkAvfhve5
P0903ihqfnOeDOjbyDXwKaP+JXIFUfu5keg+puhnjOsZ803MZ+ErriW6/wP2
QTxqVQPjTTroPfip5N634RVqVT6u1FMyj32sqfQoPge1qqPkReaDX3/91e7N
6B7TpptumrJ+aCpmz55tNWrUqOQz4FdADqcp5s6da+2www7ueOYo7ZjhuSEk
6eTStxE030G99f1FP3+y5XL3c5NaRxR9neDPwBiR4+36dVEPOam+Daxrdu3a
1R0b6kN1q8A5IiSp5NK34RVyVh4Ufd80k+zXp5Dzgrxlu7eHqbg02CpvvTTE
dM2YMcPIWHLFFVdc4T1fV2Z5foqRXPo2/M995KpivXU/yW+uarKJ37cxMo9H
Y5pOSo+IvmZR/xI5tJi3viY6duglpReUnhVdWwe1YR5TmqT0kOjcwvuUxind
o3SX6OcCepveInqeOlxpqOj4vMFK/6d0hdKlomOTBomuw3S20hlKpyoNUDpJ
qZ9SX9G+PfhQj1I6UrRtP1TpIKUDnOPYV6mj6D5Eu4uOdW4j+v1ye9G5c/A7
bCXafw5fDvq1biz6vsWcHb4b1LaoiM8GMRX59m147YJbrxvHvkGE8cF3NQP7
N27cOHJ9i1yDPHNvH7DmzZtnnE8CX4g3bqNevXpG+4ihV0qXLl3c8SBm+6Cs
ryJCkkm+fBteIUYN9fnwjMimz8p497OwFpg0kKN+8MEHlxzviSeeaMexAfQV
SKpvA/j6uZyX4XkhpBDIl2/DlVtPDXNj+HFrZji+c93PMpVTDKZMmWL3Q3HH
gpguU/kkuQLPC895ui/zS6doyZdvw6u/pTRXtfL1Wcmtb+PCSlxLdCel7ySe
d/BMhH7JWBOC/Ud+FmJfEX+H+S6u/eVKS5X+Eu0HR8zfYkcLlRYozRe9Boga
/ahjM0d0D+YfRfci+d459m+VvlH6SulLpS9E5xLAN/GJ6OcP8kBmKr0r+t7G
vB73n+v3QTw1fD6IhUDvc8RZ/RHzb7beOX74o9CPYGNJzZbO72D3Rf/pp5+M
PEN++eUXq3v37va6A+qZoqbUokWLMvqMe+65p0wvWMR+fPzxx3kacXoQG4r3
FGc8uHb7hpwHQgoR1FiA7zuuZwFsOews/NtRYjkwH4J9tm3D1KlTjdmDVAwe
PLjkGGGDEX/mknTfxsiRI73nZ0TWVxEhyQVrc3HN3TB/nS7aTxg1luMmd/9b
brnFmC249dZbyxzLqaeeWm4bzInQIxa1etD/7ueff7aWLl1a4stNGshz9swp
X4t4PioDiN+fJvHcE3j/w3P/OcltncFkk1vfxqRw30aP5Xk8EtMg3irO928q
PsGfgzUB1CX213tDXAl8QHY8IeIKC5XTTjutzHHvtNNORnM1wXnnneeOB/6m
UaLjig6nqCIQYuUQOwf/rwm7Bn814gE7SWr/Leai8EXbPT0++eQTo/bAD9Y6
URcI48McGvnlXpLu20A/Xc/5eFGpSwKuS4rKlQ4R/U5lwr5hrQ7x0OhjF+bn
uMfdJ9MaZbnkoosuKjP+u+++u+RvWDNDDMQRRxxhxwfDFqOmGoQesehxh1pv
X3/9tbV+/Xpjx+AHPbU8fWCx/tk1AdekaeG5Dx/DlzHfD66Qs5KLXNVkkyvf
xjPd97d9F5W31kZJf2yqaIX4Fqx5niWldazQU3YZ/g5fAOKjC5HXX3+9TK0N
CLmSJvn++++tNm3amD7nFFXsQvze66LraiDv0PsOgLy8r7Ed5qizZs0yahO8
IFbNW4cf65z+OoBJ9m2sXLnSjrVLwPmnqGIW1q3Raw/xGahB4O+z8pC77eOP
P27EFqDGR79+/cqMGz1TwOTJk62dd9450rHCvg0dOtRoPVQvqIWagPNPBQux
BoilQa4qag0UV0xNLnwbT/dsKZN7fp82ZgPbFS+oz4D8DdPXK5V/IYbgN9H+
fsR2I1/CateuXWL7I4axZMkSq1OnTmWOEbme8+fPNzquk046yfR5pqjKJNg1
PMP+J9quoQZ2LdFxa1b16tWN2wQXrE2effbZJWOHDxQ1h/wk2bdx2223mT7f
FFXZhFgON2fFXZ96xv37iy++aMQW/PXXX3Y+sXesM2fOtMaOHVumjlpU9e/f
31q2bJmRY3FBj72GDRuaPt9UeiFXFe8zz4uOJ8FzH3USC5uK+Dae7dnLrg2a
Nl5D/R3bFj99RNcQRQ0KzAcR+4O4X+Q6Yc64SOl30fUjUN8C6/1YM0OfDtTB
WCPax4xrzfT1TqUWzhnitIeIrs9q//vuu+9u9FmSDVj7POaYY8ocX5UqVaz7
7rvP6LjgI/L2tKUoKnahjtDJop9ZVo0aNew5eBJAPyp3nBgX1jaDSLJvo2fP
nqbPL0VVZmHd+r+i5+z2v02bNs2ILVi4cKGdV+KOA/l1yDHx1hZF7h1qJl98
8cXWzTffbMdnoK7aLrvsYvud/cf3f//3f0aOxQXjT8A5pjIX3l9RZ7CwSefb
qLAqjV/DBfVvEde7m1J7pT1Fx3Sg7wjymzqLzqk9WOkw0flnRyj1UMLvhP4l
WDPDtXWC6Hfnk5VQgxU9T9D7BDkR8Dufr3Sh6Jgi9EpBzxTkxqDPxzDRMXjI
p0adgjuUxiiNFV33Hj1ZEIuHHi1PiK7Zif4tyLl4WXT9OMQpo5c4/NzviY7r
+1h0fjjqhaJ2KOqIzhbtx/lVtA8HdTjhv4HvBjVL4bexe2wVuBCbPcI5b25+
+k7u33fddVejz5JMQS6k93nq6oQTTrDrU5kE67L77ruv6fNNUZVRsN94PqB2
L3piwTdvz58zrU+cD7755htr2223LRkveo2kIsm+DV+PFIqi4hHWphCbhrn0
tqLnu/bfEGtggl9//dXac889S8aIehroU+f+N2q5wX+7atWqcvuirujVV1/t
rWthq1mzZtann35q4Gg0999/f5na9FTihbX3CaLfPVFHsLDJm2/DjuW4t8jz
UAoJ5FJVdVRNdMxRDUeIO64tuh8hVFe0j6aBI7zHI04J/U7R53VTpSai+742
FV2naQvRPUOgrZWaO8I9gmuglejnCOpTYL6M/K62SruK7jOLOp3w/Rwouv6U
W3MIvhvUvjZxr7v1hR8W7c9oLOX72eJYEHdj50QmtV61F+RiIq8U83z/Mfft
2zcxc/8XXnjBqlWrlml7T1GVQbBh74v2m8NeuzGpqLcxC9tg7uztQWKCFStW
WMcdd1zJuPfYYw/rt99+S7l9kn0bP/zwA2PTKCoeIW8YtSyx9od5p7cm/KPu
dqniv/LNnDlz7PiLoLEfeOCBgfl2flBH2a2r7Ao1PEzlSWN97JBDDjF93qlw
Ye0ZPSvh58O7mr8WTeGS17iNHvN175Tu+5s+TFKwIP4F8SBx3u+IQZmsdJpo
H04YeA+wY7Z32GEH648//jDyHIkK6mijjoXfn4647jPPPDNRvhk8k329W/Du
hb7Aj1BUEQg+08fF6bNkQMiBRH/ukaLjCoNqicG3gVg9ey3x888/N2oTRo0a
VTJ+xGuny49Psm8DIJ/ecz4QC/xgAq5LisqVEBts+0YNCLnduKcQg4ZeKVjD
C2Kcu8/EiRON2AHkBsNP6z8G9ER56623In+Ov9cK+qi88847eRx5OO+//779
3HDGgzXKSQm4Jk0Lz33Eyi/K8/Uf9tzHM/1W0WvKxVVD1CXvOSkldTteYAwH
yQLk9aDOTb7vd+TNIA/nXNGxJDUijq+50i/4DNTfnDdvnrHnSBj//vuvNX78
+DKx3K7w/BwzZozdNz1JwLeB3gfOOJHTdGJWVxAhyQXrh7A7cc5tUE8PPsLj
RMfZhYF5z9vYD/5Qk/Pkjz/+2LZV7nFgHp+OpPs20OfRc15GVeRCIiShwHca
p33DXO4l0WtTyBlO9+42yt33rrvuMmIHfv/9dzs+w38sZ5xxRkafAxvpj8c1
WXfjvffe8/o23oxwLioL9ZTekHjvC9QJmKB0rOg4++ImLt+G7d9ALxXGcJCM
QL2SfPk3EY/1ueg4RdRI8cYpRgV5OZ/g85o2bWp99NFHxp4jqfj222+tPn36
2D587/Hjv1GbCnU3kgjqfB955JHueFG7pXsW54eQJIMcwDjmOKibh5pJqJ23
tWRWBx2xJXaN4UcffdSILUAN0wMOOKDkePbee287PyUd6AG13377lezXvHnz
RPk20Gfbc46uzOL6ISTp3C75t2+rROecoNYcck5SxWgEcbn7OZdddpkRO/D3
339bPXr0KHNM6I+STd8Wz5zJVpcuXfIw4mggTwbPDWcsT2R+6RQtyPm31wzy
LDz331E6R2krKaack3TE6dtw/RuM3yDRQR1WO+cjR3LjsfC8PUipZgXHh3cT
1GC1NtpoI+vZZ5819hzxs3LlSmvcuHHW5ptvXu53QG2qO+64I3GxGl5QX8uT
g4p+Q7tV8FwRkjTy6dtAT1fYuttE1zLKds1siPuZN9xwgxFbgJ4A7hhQ0/SB
Bx6wY+R++umnlPr555+tDz/80O5f5e4LW4j6eshvxzaoeWEqjxD1kuFzdsaG
+Pljszw/hCSZfPo2kHNyn+g6/NnO5VC73+5N2Lt3b/u+jBvE1aKGu/fYUDsD
NipTvL2xIdg/E8cEhgwZ4h3L0CzPTzGST98GruUPReec7COVNVamIj1gAXqg
TO5xoZ1zEj0/ZVJMR0cKH9ybiKGu6P2O/i3IqzxKdBx2ru53fM6d7vfceeed
Rp4hfuDXwBqEJx7QVu3ate1nH3oNJJ3vvvvOG4P+jaSvfUJIoZEP3wb6iyPn
BD3JN8/BGPu7n92/f//Y7QBy0/C94rFhbdq0sdq1a2e1bds2pfD3HXfc0apT
p07JvqiHutNOO5Vsgxy90aNHx35MYO3atdZuu+3mjg21DvfIwbkiJGnk2reB
9Sn0OUHfwB1yML7dRd9/dq873JcmQP6J9zjhh81mLOgP6/0c2EpTvbsHDBjg
HcuAHJyrYiEfvg3knNyvdLTo/g6Vm4r6Nrwg38TOO4ni42BuConEfkpLJTvf
JXJZ0N/rP6JzR/w9TnLFZe73Xn755UaeIV4Qq426oP7fBPP8KVOmGKubnSmo
Q+UZ/3t5OneEmCRXvg3kbKHeOXqDw3eby9jT/d3vQc/ouIG98s2Rc6pLL700
9mMCsNMNGzZ0x4H8yIY5PGeEJIVc+DaQc/KV6Bgy1NCIWg8tCugFiL6wdn1i
5IeY4MorryxzzMhxRk+7TBkxYkSZz0GNUlNxG507d/aOpVMOz1mhkyvfBt6N
ZojOOUENjWpxHkSiyaVvAyDfBP1RGLtBcgPsof3ciSjEeKCO1CWSG59+FPqK
E9PYq1cvO2bCFPhuv/8ffVRPP/10uw96IYG6Xp7jeCimc0lInFTEt4H6ung+
I/YUfU7yNa+BHcWakLXddttZc+fOjdUO+OM2cq1LLrkk1uNxmTFjhp1f44zj
S6lMudCkMlER3wZ6rIwXHW9bO0/jg938At+HuK7p06cbsQcPPfSQ3a/OPfZ6
9erZtdIy5ZRTTinzG/bs2TMPo00PnhPIfZbSefmOeTp/hUhFfBuIW/pA6WbR
fU7ozwgi174N/ZnXRvBtZP65pDJygNJKCb/XkVeOXoZXiK7PsVHMY0RM488Y
C2z5999/b+RZAu67774yeSio43T99ddbq1atMjambDn++OO95/jMmM8pIXGQ
jW8D80T4+jDfx1pNvvNpN1GaJs58+4UXXojVDmDNEfN+9IM+55xzIuu8886z
Bg4caK9/ur9d3bp17d5L5557rr0NPvP555+P9XhcbrzxRu85vSfP55AQU2Tq
20B+CNankMOwvcTz7na3+/3Dhw83Yg9QB6hZs2YlvwP8HM8991zGn3PIIYeU
+T2j9JPKB//73//smiHOONAjpVEM57FQyMa3gfUF9DPuIbnJNS1u8uHbAFHy
UghJTxdxciF9Qozi96JrXaAmRzY9TnIFanJPd8ZlvfHGG0aeJeiR7snftvug
DB482MhYKsrq1autrbbayrs+3cbc6SUkb0T1bcCfgXrn6FGNnJN85del4jZ3
LMOGDYvdHsC/kanAokWLyvWAdWuH+reNG6ynes7vCTGfT0LiIopvw+1Zh3qT
rSWzPk65oK87lu7duxuxB7BDyPnz/i4nnXRSRp8xbdq0Mn2yoQcffDA/A04D
fESecYyO+Xwmnai+DfgzkHNyluh1jLif+4ULfRsk2Rws+t3Wjc9w62KjpnyS
8pPHimOPbrrpJiPPkuuuu66MXcSaJXwEhcgHH3xg59I4x4JznklPN0IKhTDf
htvTaYTomhdxz/e9nOKOC/FU//zzj2kTEYnff//d2nfffcv4NpLQA3b+/PnW
zjvv7I4LOZe7Gjy3hOSTVL4NzOewPoUa7z2V6pkaoGIXcXKfUXsTPdpMcP/9
95f5jRD38NJLL0XaFza5b9++ZfaHn8NELjLmnb6xnGrovCaVMN8G1nLx3n2j
6HqDzFXMBvo2SLI5THSP5mdE1wTdTmkDoyMKButu/yrZ64Rx+xTw/PL661Fj
e+bMmbGOIZdcffXVXluPfNvK2ceKFDtBvg30OXlQdOzpFuaGVoYOSr8q2fFU
6GFUCCxevLhc3EYSfBtPPfWU13eLmD/2gCLFit+3gZjbV5ROUtpWklEvAPef
HXuL+xL3pwkQU4beTeL5vVAL9PPPP0+7L+LpUC/Eu+8FF1wQw6jLg+eDJ+4W
z409DZ3XpBLk20Bs5v1K3YU5JxUnP/U2Bqb3bfRYnoejIcUHcvRaSPJjsZCT
jr4sdr2Lzz77LNZnCfLRkYMijp1s3769/XyBUI8qU6FH7I8//mikpwrqlHvf
R0TXFSCkGKkrek6NNUPEniLnJI4aGpmC8UwV55584IEHYrcL2ZBU3wbqfUip
fRtu7rQSkndQSwYxaMg5uUF0Tckk+DP8IB/GvidRi8cUTz75pFWzZs0yPopN
N93UrqU2b968kj4umJvBF/L1118H1lpGj+vZs2cbOQbkwXjG8rokcz3SJOjN
g95/eA+Gj+Ns0f6MpD33C5f8+DbCP5O1RElxgjo/tj2Puxdsv379yjzXUIcK
cRyNGjXKSoiF3H333Uty0+MEfWrRi805FvQPaGHulBKSV2qKXr9E7l3S/beD
xLEvhx9+eEH0kk6ibwP9A3bYYQfvWt2hBs8pIfkG+SZ9xGzOSRQOEacfFGrC
//zzz0bsw9q1a62LL764nK8CMRnoU4U6PagPevbZZ1sHHnhgufoa0CabbGK9
+OKLRsaP50LXrl2947nAyNlMNuj5c7LoeoJJf+4XJrn0baD/6+QeL0TKR3mm
58g8HhUhJugmnjjC5cuXx/IsQQ2qvffeO11Nooy1zTbb2PnqcePr8353bGeP
EBLGVuLkpG+00UZG+0FFJYm+jWeeecZr3z4U7d8ihJgF9yF6a9r35tNPP23M
Rixbtsy69NJLs5q3bbbZZsb8GuCHH36w+1E540GN2K1jPo+E5Ma3oXNQ7pVn
esyP6NewbD8IIcUFYsoQd2lVr17dzhOJA6wvtG7dOi++DbwbxAmOpUWLFu4Y
8B7VK7azRwgJA/GyT4tjHy688MJYbUM2LFy4sIzfF/P+JUuWGBsP1jQPOugg
r529xtzpJIT4uFqce7NLly5GY9OwZjV27FirXbt25epoBAnxtuirglxikyCm
xDOuycJ8FGKCKPkjudbkHpNMHzYheWKwOHYdvcTiiN3A/H3kyJHWVVddZV1z
zTU5ET7rtttus1asWJH38XvBd0rpc/FdYX8UQpLEEaL7G9jx0UmP3YD9Gj9+
vB0LhvrEsJOrVq0yNp6pU6fa+YKi7Rvi37cxejYJIV6aKy0RJ6/3tddeM2Yr
XBA7O3HiRGvAgAFWt27drA4dOtj1RtHPZb/99rN69+5tDR061Hr//feN5wki
ZgP5PFI6h+tu8mSSSkzsvo0e8xmzQYqYtkqzlayqVavac1kSDfiBfDXCBxg9
k4QQPxsrvSrOPTp8+HDTZqOg6NOnj9e+jTZ5IgkhgYwS5x6F3yAp/Pvvv9bS
pUvt/tGIzZgzZ461aNEia+XKlaaHVsJNN93ktW+viX5eEBI/sfo2eiyXZ3sy
xpwUO3eKJ3YDzySSnlGjRllVqlRxn4tfie6PSQhJFvA5rlOydtppJ7s2JkkP
1oA33nhj175hbXg3o2exsEF+FJ4PdWL+zobCWMJiB/elHbuB+/XVV181bToK
AjwHEEsi2r7h+TDQ6FkklZu4fBuTe35PvwapJOyktEzJ7sv6+OOPm37sJB70
qvXVDDnH6BksfNA/Hb32tlTaMKbvRD/TPZQax/R9xAxYi0MNTPteveKKK0yb
j8SDmDT4uaXUvt0nrI+fDei10Vd0X9EXlJ5VGqPUX7T9yQT8/uiNgf6Lh0t4
XQDEGo8QHbOEGgLHCvs1Fiu4DsZJzLnFhY6vBjzqNDJmg5gDtS/yHauBOqOE
VC4wD7Lt/G677Wb99ttvph89iQU1sy644ALvc3GGUlOTJ69AwVx7L6UnlH5S
WuT8L+YZ1yk1yfDz4KMbroT6SHh3SNXPAd97utLXSguUvlE6U/juVsz8R5y6
G+gX/dFHH5k2I4nmwQcf9No33CMdTJ68AqWd0ltKa6R8LcV/RPvb9or4WfD9
ThBnDUJppdK1KbbdRbQN9X4fxnBaNgdBCoL2Sr+Jc75R74Kk5uOPP7afA1J6
f5xg8uQRIujFmq+6Gvhs1tYglRP0S7R7pkCDBw82/fhJLNOnT7dq167t7RnW
2+SJK1BqKA1VWi36d5yj9JnSWimdb/ys1Cni5x0q2jfina9clmLbq6T8u8a/
wvlNMQO/Fdav7fPdo0cPa/Xq1aZNSSJZsGCB1apVK++9cZ3JE1egwG7Nk9J8
ReRF7SA6bsP72/4o2heRjmulvM362vlML3UCvsMVnu/Nsz8kknAGi3OuW7Zs
ad/HpDyw+0cddZT3vsD9Us3geSNEM7nHCxXON0FuC2JAJve4Vp7pvr/pQyIk
AWAtG+94VuPGja233nrL9GMocfz55592rW8pfS4i5oCxvpmBGNrbRf9+WIe8
QWk7pU2k/Hrjt0rbpvk8xHZ/IOXn8ojHrufbdk+lXwO2hd6R1LEepPDpqPS7
kt2j8K677jJtThIHai2dddZZ3nsC7+WNTJ60AgS5dbBb+P2Qh7K552+u3fNq
ZJrP21rK20X33Gzn2xaxa/8GbOvqgCyPiSQfPD+/FOdcn3nmmdbatWtNm5TE
MWbMGKt69eru/YDnwd4mTxohhJC8gppjL4nzbNx9993tfl5Eg1yUQYMGeeeJ
i0XPY0lmDBL9+/0tOnfES9AcPl0s9VHOZ/n3e0R0fIiXswK288Zts/ZGcYNY
Ift8N2nSxJo5c6Zps5IoJkyY4O35ihiqY42ercKjutJE0b/fLCkfJ/E/KW93
pop+L03FQeLUwvUJfhP/evPuAdt5dUxWR0UKBZxfOwcK9/F9991n2qQkig8+
+MC2+1J6Pww3erYIIYTEQWulX8Sx/aeccoq1Zs0a04+kRIAc9Fq1annn/aea
PFEFCnLQZ4v+DW/2/Q21vH6X8vNx1EkLi40ZFrAPdEHAtqek2BbC+4M/xpsU
F7jG3hDnnO+111703zogB71Zs2be+wE9XxmrnRmIi3D9EP/x/a2F6FgLv93B
9RgWG3NpwD7Q0IBtG4j2laSyccdncUykcEDuXUlPWNzPrC2kWbJkidWxY0fv
vTBNWD+UEEIqC/3EqYMA3//tt99u+rFkHMwPmjdv7n0ujpfyMQEkHPgnEH+N
32+u0ha+v6NuiVt/w6ubQj4TfRWfD9gHcRxdA7ZHH5ZXA7Z3fRust1T8oGfi
QvHEbq9atcq0iTHKokWLrE6dOnnvhfeUNjN4jgoV17agTmh939/6SbDduTPk
8xAHEmTfUEu0e4p9mouuO7o+YL9DMjweUnigBve74pzz/fff31q4cKFpE2OU
f/75x59rh9pcuxs8R4QQQuIFvv/bxHkObLTRRpW6L+wPP/xgtW3b1vtc/FjY
FyUbEBOB2qup1hwfluC5f4+Qz0R++c8B+6Bu3jYp9sFaDXwsq3z7LBe97plE
0Be3oYT3fSTRQW1Hu24t+l5fffXV1rp160ybGiOghtAxxxzjvQ/+EF2XhmTG
vkp/if4NL/H9DX7wh6S8nUpXixq5Kn8E7Aff3KYh+8EngrjC5Z59lkpu3udQ
dxz5fhWpvVzd+RzEuSC+5TDRfuVaFR4dAehrtEScc9+nTx/7Pq+MIJf4mmuu
se28lMbcnmLy5BBCCDECYmRL1osaNGhgTZkyxfRjKnZ++eUXa9999/XOKRFv
ELVvHynLlVIaH9HO97edlX6Q8nN41N/YMuQzuwfsA02OMB7Mqb3vDfiuqHPr
Zko9RfdcQQww+hicKKVz9FyCeBf4gpC/3yLHn11Zga/oRnHWtqtUqWLdeuut
ps1N7KBnwIABA/z+PX8NHBIN+CjwPon+Jf7eJ6jL5Po9/H7yuiGfeUjAPm4e
SxQu8eyDesv+WLlMQR+Wx53PG5vF/rWVjlN6UbR/Bsf/mtLbonMVkU9zcAXH
SDQni8e31b9/fzt+obIxcuRI275L6X2AONDq5k4LIYQQgzRXel+cZ8LWW29t
vf3226YfVbGB/MyuXbv64xiPMnc6Ch7U8cT8FTHY/n4kqWp8+mty+BmSYr+r
I47pFs8+mKuni4uAn+Ek0XPyP0W/L2BevlhK14SQU3+F5K4uKeo5ur0P2ubo
M4l+p3xAnPNfs2ZNu5ZmZQE9US666CLvPYNrF32Tq5o7JQUNejJ1Fn2P+usD
XSTBdipdLcMbUux3TcQx7SHaH499EDdS0fop50tpPZF7Mty3jZT2YYZv43DR
8Y+IacFvh98NtZXmK+1TwXES/SxDrZaSvuoXXnihfd9XFu6//37brkvpfYM6
v2G+REIIIcUP5iMlfcVQm+rll182/cjKO3PnzrUOPPBAf37ziQbPQzGAtRK8
7/v9GpjXBtXAQExFl5DPw5x4esB+iPPuHHFMvaS0xke6OFWM8zHRc+/Bonsz
1nWE40Icv9tnCPP/H0XHcVQE5Nz8JKXHtnMFP4+UBTUR0G/C/n1r165tr/Mh
jrmYWb58uT//3F3PZD/r3AN/Qskz1CPYnXR9tqYF7Ad1ivjd3p7XV2U4bj/o
obzMM4ZMfBvwVXwvpX7noFpV6JX7rLPNkxUaKXHB/Yz4tJJrB/WFli1bZtoE
5Z3bbrvNqlOnjveeQY+ipOacEkIIiRf0/3bnJVa9evWsRx55pGjz0z/99FOr
ffv2fr/G+QZ//2KnvQT3OJwh4WvIqHUY1PsVc/mNIn63Gy+C94z9QrbDHBHv
fvBr7B+yHWK2R3vGgr4vnSOOxQ98Kf46gvRt5B7E6SMu3v6NEb+M+hvFGr+N
uoLIv5fSawr3HmKWGKedH+CfxTPEb6deEZ0blQrUo/gpYD/YoM0jfveJUppr
1C2Lsbugtgf8yJgHZBq3AZvlxo7cFrLduVJ6jPiusL64JDq4r3GuSp6xuP+L
tb4o7Dbsty8PBblOYbmthBBCKh+oMVGy9lS/fn1rxIgR1tq1a00/ynLK1KlT
rdatW3uficg7OFu4nplPUsVd++vx+TlCgnsBvJjBd7s5CTMlPBf9QNHvB/6+
jkGgVs0XnvFMEV0HNFOudsZV4lcU+jbyBd4jS/xIqDuHuIZi6w/73XffWYce
eqjfr4G6uvXM/fRFj9sbyq8z0uyHWkLeWqCunhPtQ42CWxMcNUD8fVuigmcf
8ggRW3eqZxxRfBuwe1Oc7VHPKMwn4/phoMezHCsJBvf3reLxbxxyyCG2PSgm
YK/PPvtsb91QCHF5W5v76QkhhCSY1qJrC5TM/4899ljr119/Nf1IqzDw9d90
0022z0ZKn4modXa0wd+7MoC4DNSn8M/f1yhtm2bfmwP2gy6K+N2I+/jA2eeO
NNte72z3jESLBz/TMx7EhGSam4K13gXO//7P81n0beQPxCs/KB5/2Z577ml9
+OGHps1TTnjiiSesFi1aeO+Tf0TX92V9jfyBnkzvSHkbhZqju6XZ9+qA/dyc
jiigF+jHzj73ZjpwD/A5IBZue9E5fJn4Ns7zbJ8u9hGxdqcpDRL2H84HuM9R
Bwr3vX1Ottlmm6LpgffRRx9Ze+21l/c+gR1HjRnmoRBCCAkD65tPi2eu1aZN
G+u5554r2Bz1b775xjr66KP988fvlA4y9itXHpDv5M3hdvWWlK/L4eetgP2g
jhG/u6voWHH4Ho4N2Q758iU5C0qfSvoewLh2vPkyF0ccE0DsLOI+rnf+e6rn
c+jbyC+onYL8dLd2q9WoUSNrzJgx1t9//23aVGXFggULrEsvvdTacMMN/e/W
iBtgPFp+QZ2J36S8jUoXywWbMylgP1yXvSJ+d2fPfodmPnQb1PtB3aAznf/u
4/nMdL4N9JL6yNkWOSn+3jEkfnC/ny46V9I+j7ALl1xyiW0nCpEVK1ZYd999
t22npex9ghxSxqMRQgiJAvzgw8STQ7zJJptY5557rt0ztVBYtWqVddddd1k7
7LCDf/6IdfKdjP26lQus5QXllVyTZj/EmHpzNVz9LNHzaoc6+2DuvmnIdsiJ
f9PzHfB7pYspwTx+tmefmyKOCd81XnSPRzfu/HXP59C3kX+Qnz5AdF8k+3dH
jdGjjjrK+vjjj02brYyAzxk9rH0x2sgtRI5Vup5ApOL0k2D/6+g0+yF3o6RH
mUewVVF7Jd3u7PONZPeOB9/yy6J9LG4tlmM8Y0nn2+jh2fZdYXxQUsB9f4B4
coxhH2AnYC8KiU8++cS2y7DPUnqtwW4PFNYPIoQQkjnIBy7zfokYR/jQ//rr
L9OPvZSsXr3amjZtmrX//vv75/yIHxisVMvUD1oJmSDBc//uafZDXMQfAfuh
x2CUXHT4MtyaGGH17VyOFx2XPU/p/yJsj7qkJWtjEr0WLWKy4Z/x+jDo2zAD
cgamief6atCggXXllVcm2oeLGs9ffvmldcIJJ1jVq1f33hvoBYkY7XQxRyR3
XCjB9u2cNPvBt/5zwH7wsUbxU6Bvk9sf5YJsBi76WQi/iPd6ycS3cadn26c9
/458k06i44YQQwA/W9TaqCR34DwgB6+kRyzsxX/+8x/bfiS5Vjzs71VXXWU1
bNgw6P5Il+tFCCGEhIH160fE16+ic+fO1oQJE6zFixebfgyWgLqnU6ZMsU4+
+WS/nx9CTnRF6siT7IAvwn8uEC/fIc1+x4knb9ijGyN+b29ne/SLTdeH0WUb
iV6TzPsOAB0ZYR/EeuB95mTfv9O3YQ7USxgunhgOaMcdd7RrKf/444+mzVoJ
yAlEzvnFF19sNW3a1H9fwAeNd8l0eV4kt8AP6j8XiHc8Js1+7SQ4l+XZiN97
mZTGebTOeNQ6h2WOlK8TFNW3gRiNbzzbjnP+HbWY0f8KdY4eFZ3rh+NEP5hL
hb1R4gb2AP6lMmtUsB8XXXSRbU+SlGv8008/2XYX9lfK3heLRdvpjQ39joQQ
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
DkFs5Q==
    "], {{0, 345.12}, {517.92, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{150, 150}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{517.92, 345.12},
  PlotRange->{{0, 517.92}, {0, 345.12}}]], "Input",
 CellLabel->
  "In[342]:=",ExpressionUUID->"d7cd3cb8-0567-471c-b081-b7ea46c875ee"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QXcHNW5x/EHt+IOBUJxC8UdgrRIKe7ubgVCKVKgcIFSoEhLsUJwKE6h
xQlFixa3AiFAkOIaLHvPf89M3tmzs7uzOrvv+/t+7nNpkpGzdubMM0fm3Gn/
jXYb18wOmtj9v412/PWqBx644282nsr9YdP9Dtpz9/123WXt/Q7edfddD1x2
p/HcXz7ptl1mfDP3fwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAoP8Yz8WELiaO/jtevsUBAKCrTeJiQReDXSwS/XfaXEsE
AJWpzlrUfH21SPS/J2/Rsee2vrpQx53dxTgVttXfz5HYXjF1i8pRyY+D803f
5vNNkziXzjtHm88HDHSqy5ZwsYeLP7q43MXdLp5wcaeLS12c4mJX83XUpPkU
EwCArrSwi6ddvOPiLRfvudg21xIBQGVqz39gvr5SfOhi9RYd+58u3k0c9y8u
xq+w7bguzjVfZ77tYpSLzVpUjkr+EJXv7Sj2afP5tnQx0vxr03nPb/P5gIFK
edFfubjZxf9cFDLE+y5uMJ8HaXdeFQCAXrC4+fuE5PVyz1xLNDDoWcv0ifhR
vsUBesaSVt7G/0WLjv1kcNyrXExQYVv1Db822H6nFpWjkguC8x3e5vPp2fCY
xPlubPP5gIFGOdKfu3jMxfeWLacRxncu/uVipQ6XvRFTWV+7Zzrz42wGuims
tD04cb7FAYCetpiVPyPYI9cSDQxHWOl7/ud8iwP0jHbmNh4Ljlsrt3FNsP0O
LSpHJecH5/tNm8+3i4sfEue7vs3nAwYS3cOe6uJbS89ZfGO+X9grLp5x8ar5
vhqVciDa/rfWveNUlMf5t/WV91MXv8y1RN0hmSNXnmr3fIsDAD2N3EY+jjRy
G0Ajuim30el+G+Q2gP5BeY2zLT1HoTFxGg+nMW4rmh87PMj8vDfqm6GxYurD
9V7KvsqTaD6OSvVWnpTbeMT6yvqZi/VyLVF3uM763hPlrchtAEDjyG3kg9wG
0JhuyW2onX6W+fuQEVFs0qJyVEJuA+h9E5nPXYT12NcuznAxm9XOTWgeoLlc
/NXS+32c3I6CN4ncRjpyGwDQOuQ28kFuA2hMt+Q28kBuA+h9mscmzEdort6N
Gjzejlbeh0N5kk2bLmlrkdtIR24DAFqH3EY+yG0AjSG3QW4D6FXzuHjdSn/H
n7vYsMnjbuPiq+C4T7n4SZPHbSVyG+nIbQBA65DbyAe5DaAx5DbIbQC9KvwN
K1q1lvPhKcc+oUXHbgVyG+nIbQBA67Q6t6H7gPlcLO9i7ShWdjG3tf4eQXOB
L2R+bq11zK+jtqz5Majjt/hcrdaqdVImMf96l3Kxpvn3ewUXgy3bmF2g1/S3
3IZ+p/r9rm7+dQwxP3dg2jqArchtTGu+3h8SnW8NF0uYX5sx1Ircxjgufmy+
blYdrTpK14cFXUzWwPFqid/Pn5l/fau6WLRN5wLqoT4UH1rpb/iflv7ba8SU
Vpo7UGg+oJlbdPxmheukKLfRqnVSprbSek31qeqBH7fo+O3UqtyG6lqtIat2
sdrd8fuga+b85t8jAOjv6sltaC3yy8yvDfB3F4dYXw5B99iaR+9qFy+YH/v5
dRQfuHjW/HqJG2Qsl+rmYebrfIXWSYvXNZvJfJv+VvNro+n4o1186eId82ul
XeliC8venp0m8dpucHG6i1ky7hs72sWN0TF0T7Ri9Pe6nu8Z/ds10b89Z6Xv
udZ2+1v074qbXKxf5Vxqw2jM7s3mX++b5l+/3u/3ouM94eJiF+saOQ70H92S
29Dv+mDz9/vXRrFqxvNojRXd45/r4nHz9x9q52sM/scu/uviH+br2GkT+zWT
21Bdf5KL+8zPe/pxdD71hx/p4t7o3+dP7NNsbkPPZLWeg+qiUS6+MF9Xq456
ycUd5p9Zz5DxeMeZr5+vi46b3E+5kzOjc70dvS6tianX+Vp0rgNdTF7nawBa
5Sgr/f3qmr1xi8+xrYsxwXl2q7DtHObruLjdc6LVf//7R/P1gn6Tl5qvZ2Jq
Q50RHfua6DwfJcql9U4fiMoQ/7vaYbMH59Bzm6ujf9e5Dk78m3Kkf3Ax3MUb
1levqT5Vvar69RzzOdzxMr6mJayvTlfZ9SwqLddcidrFFyTKq3p+7ujf1HY7
1vrag2r3qb6K3xN9dqrD4vdEofd20RrnXNx8u/UhFy+bbxer/tM6u2ofql0+
3HzfnrnTDwEA/UI9uQ1dB79LbKc6X+1+PRO43CqvuZ4M1bVqn9d6TrGa+To5
3u+FaB/dpz+f4TwKtcnvNJ+7r0XP+pJze6ndvUCG/ZIeSOyv92Kb6O91nRuW
sczJ+HWF8+xg/t7kuyr7hu+5ru9r1vl6gG7ULbkNtZNvCLbfNcM55jRfX462
2r9d1WGqi+I5Ac8L/j1LbkNt6WOs9J6iWijvcES0787WWG5jcLRtlteotvyL
5uv2Wh5N7Kfrlt5LfT5Dzd/LZHk/9RkvlPF1AK2i9ovyh8nv439cTNji86id
9nhwngcqbLtYsJ32m7XO872S2F+5y2RdrDbUy1b7d5kM5XvC+/j9g21U76r+
3dvF+xmPq+c+F1l53iTN+sG+yov+KMN+Ma2Dk6yPlNddNvo3PZu7P2OZk7FW
hXMpf3SVZav/4jpQ1wKt00M/DgD9UT25Dd3/f5nYTnl0XSfus/rr6dPMP/es
ZBUrbYvrmqvnGx83cC7tU2tMp67nXyT2Uf5kvhr7hO5O7K+8wxbR3+safEED
5T4kOL76G6qv4ucNHCt+H1rV/xPISzflNq4Jtt+hxvGXMZ+rqPe3q7ppa/PP
H5N/Xyu3oXb0Pxo4n+L/XOxlpTnULLkN1TFvNHA+zYO4d41jJ+8JtK6ExuOd
1MC5Ho3eG6BT9IxFz8+T38Pj2nSuPwXn0XlnS9lOOcjk71vjReodv/JsYn+1
TZL34OoDVm9992VUriTVQ8kc6xXm64of6jy2Qn1mf1rjNf0i2EfjhuoZ06Z8
VTLnov4jS0f/NqM11mZOezalduutDRwrDvUrmbbsqADQ25rJbWg8xMWJP6t/
gO7v1QdRYzA2N39//k8rr1N1n71IlXKtYqW5DfXZezXxZ13T1PdOzxfVP0Lj
YXTfr75/76acT69xjSrna2duQzmc35q/pj5pPk8zKqV8T0T//mR0/u2D4+tZ
wqfBfiqzrk8HRudT/kfvg/pmv23l74PaId0y9hZoRK/mNuY13z8hrS5U7lPt
d9VjW5nvc327lfZ70P1J+Ay0Wm5DbfEbU86n/mkaU/gr83WG+oRoXMglLj5J
bKe65mkr7c9WK7eh+5q0tSjvMZ+DUJ22k/nc9oNWvg6mnj1uVuX4ydyG6tCj
rLTe1vg8vZfqx6Hrz17Rn5OvK479arwWoJX0fQy/g0PadC79zpK/Lf1G0sa4
tju3MYf5OkPbxG2bZBtS7TiNF3s8+jf1Y1G7LhwzEeY2NGbvHSutY5TDjes0
1SHq63G1ldYPyXpiziqvqZ25DY1//qv1tQfV7kvWT+rHpjGC8Xui0Ho3y1op
9SO5KuW16RqjMdxaF1jtQV1P1Af4Nkvv61upfzAA9Kpmchtqd39jfbkAPa9T
nR72x9Dfabxn2Cf6L1XKFeY2wvavjjdRyn7q26BneX9P2a/as7p25jZEYzUn
j0L3RMcFZTsv2EaR7KuqfcJcv8q4oqWPIdX7oOcD4fMbxYF1vi6gm6TlNlZv
0bGTYx5amdvQuLS0PIP6is9j6b9h7aM29qsp+2XJbYTzFSvUn2ItS59rWfW2
xq7fU+V81XIbqnefDrZXO1v3VGG/e9VPmqNJ92Dhs2y16yuNB0zmNjTuL74e
6Vqh92JKK7/+6Fy6L3gmOI8+63rnVAIapXFhye+f+inN2KZzqV9C2H46ImW7
duc29FtUTkDtGd2L6/f5eLC9cj7jW1+750dW/hsOcxvJUG5EcxRXqkOXCcoY
xxUp54m1M7eh+mhS63u9ascm26uq15SXmcBK24Ph69vIfE4nWU7lNKapUia1
q8PrifLlWec7AoBe0ExuI46HLdsa6r8L9lP/ikr3DZVyG+qLUO25XkzXR+XG
w+vhURW2b3duI1TvGrBqg4fv/c4ZyqT3N8ztx/OkAL0oLbehZ/N6Zje0iVBf
ifA+u1W5Dd3Dh30UbrFsc/hrXrvk2gJZchtLpLwW5RmWz3A+1YWXVDhfpdyG
7hHCPGrW64Lur54K9q2U904bp651J7KMtVO/vXBM+soZ9gOapbpC3+nkd095
wHbNa6v2T9hv87SU7dqd2wilrQGb5bdbKbehfh5Z5lNTPXRnsK9ed6V5XNuZ
20jTyDopxwZl1Jx0ac/7Qqta+RwlP8uwHwD0imZzG+o/t1rGc2kMSrK9rX54
leatSstt6N5gz4znEs3dFY5F1DPBKVO27fbchq7fyf7p6ve9UsZyrRmcS/3u
08beAr0gLbfRrmhFbkPtzXDOUfWfqOc3qGePaWPtKuU2DkvZttqYvJDmmAvX
kqyW29B4m+R4OdXta9dxPuWrk/Wv9k/ru5GW28g6Z4HuTa4P9s2SJweapTpA
8wcnv3vDrW/tt3Z4LTjf+SnbdENuo9ZcaJKW21AbKGvbU9SeC/ss/KPCtt2e
29D7GM69dKlVn8Mupu9iWA8elGE/AOgVzeY29HwvrX9zGt0j/Cexr45Vqb5P
y23oGlrPXNWypZX229N1Y4eU7bo9t6H+3l9Z6euoNe9eTNdkjS3XWBQ9m9Z4
d+aPQq/qtdyG+kqEdezxDbzus1LKl5bbUO72P8F2apvXex+1Xcr5KuU2/i/Y
7tw6zyVh/7K0PvRhbkNj1uet4xwnBPvTpkcn6Boczjumdd6zPGdvVFgHXGnl
9769nNu4rM5ySlhPKV+8Qsp23Z7bkHAOZX0OWceW6LmY5sKL24SrZNwPAHpB
s7mNTStsW0lyzgjN1ZE2v5Wk5TYOrrBtNRrTnVybVTEsZbtuz21oLo7wua2u
l+qHP0Wd5QR6Wa/lNrYPtlE9U+/60qK+xB8Ex0rLbWj+jjEZylWL6sRwbtVK
uY3kPCWq17epsF01OwXnui1lmzC3cUmd5zg42P/UBsoJ1Ev3xRqDlvzuaY6F
duY2wrlvLk/ZpldzG6pD16mznKJ1/cL27j4p2/VCbmPfoIzxd0pzC41TR1kB
oL9pdi7RevoESnJ9d40x2bzCdmm5jSxjt9P8ITjOv6x8nGu35zYkfOao0D2M
8kW6x9H8YepDw3UN/VlabkPjEtZ1sWEToTxr2Ge5FbmNU4Jt7rL6+59ZVI7k
PHyVchvhegzqm75oA+eT04NjpeU2lEtJrlmg68nC0b+NmzFE85gm5yTR3J+z
B+cKcxsn1vl6Dgr2z1LvAs3Sva7GDITtkHaOSRkRnC+tL1Wv5jZGWPb+wkmq
s8P+M39K2a4XchvKj78SlFOhsToXmX/uOL3RHgQw8DST2xhh5euQ1xLmNiqN
dw5zG7pOTFfnuWK7WOnr05x68wfb9EJuQ/OJVloXXTkO5Zq0lrzW5dVnuHS0
T5YxmECvSMtt/LxFx271GrB6LntdsI3mPW2kXS63BcdKy22E66PoXqLSvEa1
hPN2pOU29N4n5+jUGMDh5nM49cQ95tv1yZxMeH0J10nZtc7XQ24DeUiba1ft
kHb1udR8OeE686ekbNeruY0H6yxjUpiv1Zwb4efQC7kNUf2XtsatQu+X1hdX
m1tjcZS7V5u2kbw6APSSZnIbGus8T53nazS3oTXAG20HrGalr0/z+C0RbNML
uQ3RmuzDLH2d8jCU69BzXs05pfnAuaahP0jLbfyiRcdudW5D7eG7g20amWsj
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
on7EWcdTx5JtU7WZK80NuoqV5jY0VlxjDJVDeM6y192vm3/eUKvPY0x9ss+o
4/jJ8THHJf5euY2tapxLzzHDMfjJSOtnojky9CwnnKsqSyg/1Mi6aUA3aWdu
IzmvnqJWbuO6YPudMpxjcMp+tULPS/XbPy/4+7T1C0NaI1B5keRcwrVCzxzn
jl5PMpeaZQ5jvV/Kj9fT5ta9jp7/1qqfHkrso7qz3rmlhwbnPavO/YF2UF+t
YVZ5LFitUF8NfZfrWbc+SeMYLqnjfMqhxPfayXnOldtYu8a5JrXyHG0ysuY2
VP8qv/FeHeV+NEP5kjQvRbUxgWnHj8c935j4e41JWabKedSHp1Z+qdJ4GPXl
0Timer876i/zB/PtagDoT9QHWve8ukcfYb4OrrS+qOaDUH+2N6Lt9DxwUJ3n
073CqOgY6kOwboXtVrH03IZo7olfm78P0TbKt6htrHyC6mv1uVYfx6PMzydd
L10z1Z9P66Z8GB1T1w1dW9WeVr9Etds1l1ayLaE+H28mXluttc10PVO/Gd13
3BG9Hh13hPm+59XmytY1V9d19UtVbkp9J+P3QWVVW0fvg95rrQ/2M6tvDTOg
W6ndq9/HiCjUtq1nDZBq1Pf3rcRx/2SV+3vFay6qLnwjik0ynkft+42j8+n5
p36vyj38EP1Xf9ZvV+O3lbeJ8yu/j8oXn2+vjOdTnaa5hy+M9lMdprosri90
P6F6RLkD1TtTRPspd6A6aWR03nMynk91m64XmjNZfWE+jM7xbXRO1amqu/Ue
q+7TnBtZnh2qn8zbUXnU/6XenNYu0TlHRMc5ts79gXZRPaP7VI1P03r0yhNU
6t/wffTves6j9WOV762Ug81K81DqeYzWMdFvU7/R76JzqW2hOkM5Dd2Dz5HY
T890VDeMjMqzSoZzqf5T+0jjXtSXV8/JRkTHUBtz/mD7MLeRnI9Hbbw/RmVT
n4xkvaZ6VHXPA9Exqq0ZU4medylXqzal2lR6L5Lvi86pscyHJ46v+k915VtR
aHzRojXOo/df44ovML++jc43wvrel2rrTmnuFeVUhpmv1/T56fsR17fx56e/
VztT7ed5LPvcowCA5lXLbcR0b6H5JbQ+udrj6tu5vvm+KK2qs3XdVJ5jR/PX
RvWB1jVmimo7dZDaQ5onRPctulfS+7C9+WcTau+krW8GoHvoPkH39uonvVf0
X/15pjadT7lh1a+qy9RHbwfzOeZ6++BlpXp6gegcqpt0n6A6dbGoLABKKc+3
uovdzN8z6zmK7nl1D69xaGrrrGTtG0ug36vaVZpbTHWEcrZqY9S7hkurVMtt
xJTb0bgP5WPjek3r0ei1tGLedNVjyk/ovdD7r7aW3iOt+Vpr3tdO0jMszWuq
a4jmNFI5VWbV+coZZRmbDQBovSy5DQAAAPRfWXIbAAB0M3IbAAAAAxu5DQBA
ryO3AQAAMLCR2wAA9DpyGwAAAAMbuQ0AQK8jtwEAADCwkdsAAPQ6chsAAAAD
G7kNAECvG2J+LfH4WvaskdsAAAAYSPa20tzGtfkWBwCAuq3o4k0XX0XxbxdT
5FoiAAAAdNKuLj518YWLr11cmm9xAACo27Qu1nGxYRSruZgg1xIBAACgkwa5
WN/62oNL51oaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIJvxXIyTdyEAAAAA
AADqtKCLa1yMdDHcxZA8CwMAAAAAAFCHWVw87KKQiHdc/DTPQgEAAAAAAGS0
sZXmNeI4Ms9CAQAAAAAAZLSbpec2TsmzUAAAAAAAABntZ+m5jf/Ls1AA0KRZ
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
pulauKiLjc3nJm538aGVrhHWSHzt4jHz18sdXaxgrDPWS/S9UF/8KTt4zolc
DHIxaQfPif5vHhe/MJ+nvc7Fmy7GWHP123cuXnIxzMXe5vt2z9Kh14PmjWv+
mfV05nP6naA8/4/N33sCraJ6R/WP6qFh5usl1U/N1G+qH1VPqr5Uvan6c54O
vR4AABqhfhV7mu+P8bqVrgnWjvifi+EujnOxhHWuPYn6aM70480/y1G/nOEu
rnSxg/ncQz1mdLG7i2NcrGHVP/N1XPzd/DNzPV9at85zAUnKyWkO0IvMP6NU
rrWd9dtn1pfLXdPoz9GtlFfY38VNLv5tvp/O9ebv36av81haO0ffMdVvW7mY
sMq2g11c6uJxF/e52MvF+HWeD4ipfvm5izPMX6dV/7Szfhttvq/uxS62tM4+
8wAAoBKNN9H1ULn49y0lnzHJJJMUZppppsIiiyxS2GCDDQpDhw4tnHvuuYVb
brmlcO+99xaeeOKJwssvv1x49dVXC0899VThgQceKNx2222FSy+9tHDMMccU
ttlmm8IyyyxTmH322QtTTDFFYZxxxql0H6CxLXuYb0+S5+gO6r+q+cX0GX3j
4mPre76t50Dqv7pgxmP91MUzLn6wvn48u1TYdmcrb5t96mKtRl4EBiy197V2
61nmnznqO1xS90wwwQSF6aefvjDvvPMW1lprrcI+++xTOP300ws33nhj4Z57
7ik8+uijhRdeeKHw2muvFZ599tnCww8/XLjzzjsLV199deH3v/99Yddddy0M
GTKkMOeccxammWaawnjjjZdWv31l/j7gaBdzme8jgPwNMZ/nUp2mekn1W/x8
W9fCEeb742ehvO3frfT5uO4z065lK7l41cq/J4c09CowUKkeUX1ylPnvseqZ
ku+U6qOpp566WD+tssoqxfrqxBNPLNZfqsdUn6leU/2mek71neo91X9nnHFG
Yd999y2svfbahfnmm69YT0444YRp9ZvqVdWvqmdV31bL6QEA0A7qe6t5MO62
lHzGbLPNVlh33XULhx56aOGaa64pjBgxotCsjz/+uHDXXXcVTjjhhMJWW21V
WHjhhQvjjz9+2nXyZRe/sez3zGiPw8y3+fX9uMzFiubbUc9Z6eelnNSsNY6l
e8y7rfyz/qeLyYNtNa/LKynbKjQ+inYTatF3SvekV7j40oLvkXIQq622WjGP
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
a665CjfffHPe1VPT1L/89NNPD9dV1HP8nfN7u/sd1WNap2SOlH/7raXnKH5b
45hpa78qDs1YJuXn34j2GWbV+02Icg0jXJxrfm1a1dVxvldjbH5mff3r1Hdk
8wxlGJ5Sfq39rfvPH4K/V32e9v6hNXYy/7svvt+qD0477bSuHn+S1S233BKu
GaXvl34/5MkAAGk0LkBjiIvXDc3FedBBBxXn5+xPrrzyysLMM88c9v3l+WZ7
qX9scmxIHFpnoNozTeVK0tZ+fd9q99eOqa2n9rWeba5aY1vluTS3h9bXfD0q
35kuHrPGcxvqN/KR+bEn1Zxupe3/Ges8D6rT90XPqsd+jzbaaKOunjeoEQ8/
/HBh8cUXT/5WvnHxaytdrwitpZzo2PFNidCcGT+pse8DKfspwjF9lSzv4p1o
n1/X2HaNqExnWPXn3RpjEo+TUV63Vh55uKW/hjhU96rfm/I1U6UfAk3S71s5
8rHXWa0bp/qgP1F9vfHGG4ffrwste3sAADAw6N4zvn8rTDjhhMVc/7fffpv3
pawt7rnnnsI888yTvDbq3nPrHN///k5t7rQ277E19lvdyp/7Ke6u49zx+Cqt
S1vrPkP5BPU7X8fFoubbi5rrL56XtN7cRvKZ6gvRMStZ3Upf4y51nAfVaZzP
VZZ4f3fbbbfimof90auvvlpYddVVw/yGxnDVOx4L2Wjsf9r6TxqDUW1eCdVH
I1L2U52Rte9WPH/pJ+b7XFSi+TMutL7+cmnrZycl50Z6oMa2/zLfB1J9QYZH
+yo076rm6v2V+Xmm0R76XR9n/nde/MyGDBlSrAf6I9Xbe+yxR/ib+ZsxnhMA
4KlP/Nj+GlNMMUXhwgsvzPvy1XYaZ7PIIoskr42aN5X5qdqjZP0563uW99Ma
+x2Tsp/iqIzn1TPC+LnoBXWX2lO/khutsdyGxtIn56g/qMq2ynu8ndj2hEYK
izLqrxzf0xXGG2+8wtChQ/tFH+1q3nnnneLcz9b3fdIYgYNz/Bz6M80ZlFZP
7VRjP/UX/DJlP43fq9afLabxJ3+2vtxttXmSlaO9P3EOzQMSjh1MujKx7Qjz
c55Wojr2ouh/65iDzI87mSk6L9pL1xX9vouf1wYbbFD8/fdnqr8POeSQcIyx
voP0TwOAgU3rYf7TomvDdNNNV7juuuvyvmx1zOuvv16cg9v6ro16XrZyjp9H
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
C8Mspd0aheZjVjviUPPjS/OisTJvqkzjjTde4aGHHsrlupLFqFGjStZb1TW0
m+iZg67p1vcZr53j54rO0tx7N5v/3HUfvUnG/fT7u8XFFy5WzbC95lb9IDqP
1nncu+6StobK/S/z8/JfYf71duv8a/HnUvjLX/6Sax3x9ttvFzbZZJPkuiNV
Q2ME1d4/6aSTCt9++22uZVfbf9ddd02W76g8Pky0ldbKjvsd1upfqpzm2N+W
izvMj1EJTWV+LMrlVjsPqn6tr0XHe93yydvGdB/wofl1Z/Y036+lG2kcffEz
2GWXXYq/07yob5f6xlmGuq1SaE3WvJxzzjnJsvyjsx9jz5nOfD+tkeZzkHqe
0+15wJ7kGpQjq+Qrnk1sV2tcysg8Xwf6jcusdl2u+yA9IznffN/LTs/LsZFF
69AtvvjihdGjR+d2Xall6NChJe9dt+U2JCjjmR3+LNEZap+r37XWn1WfbY0P
15hw/Y7jz/7v5vMQc0XbzWl+fYM0c7gY7uJJ88/gKrUPfhJtp+Nrjcg/Wn7j
ApTHuMf6Xq/qkFddnGD+GUK3zC+kNSpHuCjMMMMMheeeey63uuGVV14Jc59j
Y/zxxy9MOeWUhUkmmaTitWKPPfbIfRz9FVdckZxTVPNNTtvxTxTtpnWXlD9V
/wnNt5H2TFZzc+i5TLyG7fPm8xKVaA6O/7q42vyznLRjam2rZ6LjadsVGyt+
y5xppe00zaE7zHwOWn1uu+FZtX5/d7oo/i4vu+yyXOuHo48+uqm8huWc23j+
+ecLM844Y1wWjaFatKOfZm/Rb0BjE+P3S31PNfZe6/Vo/afJ8ita/+He2DVq
5CvGzhGaZVzKGNZxRHN03bvK6qvXfzA/96j6wmVZL6EV/hSfX2t9dCOtZXbY
YYclx0J2bW5DY+cT5XzBemedHGQ3pYtHzPe1+Mh8Hyy1fTW/5+fR338b/Z3G
jas/tsauV5sTb3bz812qD5XqAN03aGy61vdYL/pzPK5d4522t3zX4glzG8nQ
+3Cbi31cLGT5zsug96k4HmXjjTfObSz3Z599Vthwww3L3qvBgwcXDjjggOLz
wttvv71wzTXXFMehaM3VsL4bZ5xxcuuvHRsxYkRhgQUWiMukMem0/fsf5S3U
BtHzQF3DlENVf441Xfzc/NracX8N1X+a/3hQhuNq/N2tLl4xv5a31rD9mfn6
TWvYqu7T+k8aCzNHi15LM5K5jbCdpnVcdE+hcTZ5XuM1HkDXl8L8889f/H3m
aYcddhj7Pk0++eSF9dZbr7D55psXNttss0yh7f/617/mVn7NgaR+ddaXz9ox
x8+224W5jWSoDaT+qKpH5rfuH7fatTSOpEauYvFg+1rjUq7M67WgX1B/Tq3N
2EjuWs9CXjSfd9CzjHY9H9C90dj7k9tuuy23a0oazaP34osvllwvk9GNuQ1d
G2eeeeZkHrvasyz0Jv22h7hY13xbX3Pxamy2njOuEP135Wgbtd3Xjrat9V3Q
71G/9+PN/y6VP9HzS/UH0TND9Y3WGJRZWvhaGlUtt5G8B1D/cuV41T8sj+c4
J8XlOeaYY3KrFy655JKy90e5lkr3IsqF6Bms+nIk91looYWK/T/ytM466yTL
lHXsFXqP6hnd211vfv0U5TpUD6lPx39cnOpiWauvfaI6YBfzfQ2Uq9W6pVqP
Re0dzfu1Sp3Ha6dKuY1kaK5TjV3QmJVaa8q0w8bWJe2hDz74oLDaaquNfW+W
X375sfPSa46jrJHnmBrRM77E58v6w5VVy23Eof6lasOoD/svjTErdcs6HiWx
fa1xKZ/m8TrQb2ieHfVLbyS3kQw9A9U4Vj3D1bzNrcx/LmLR2Naf/OQnxTxC
Xr7++uvCCy+8UHjwwQcLt9xyS+HUU08trLDCCsW5OfW8Mu29yftaXknwfJa8
PxqhZ6cawzJtFJNHf9ctsuQ20to4J5rP33RizIrG/qsPTLEeue6663KpD1S3
LbvssiXvx9Zbb52pD4nW49acG8l9lSfJk3JEifJkmW8SvU39rpST0L2Mxthr
/gzdozTTFpkwOs500XEnbfJ47ZAlt5HM477n4q/m+9p1aqzWaXEZNB4kTxrP
Mffcc499TzT3h/rc9prrr78+OSd8pTlkkC23kQw9s9U6TPGYlW6dn6tr1Bpj
khyPknWfaL+d8ng96Bd0X6L+l83mNpKhHJ3qhSWtNf3RNzPft6DYF/Dzzz/P
7Xry5JNPFmabbba63o9uzW2cdtppyXJe0ILPCeg29eY2kqExPOqDcoD5uQLb
9ZxW86AU1w9Qmzuv9QMeffTR4jzN8evX2ijDhw/PtO/HH39cWHHFFUvev913
3z3XZ5t33313cs6NJ6z71jQHWqGe3EYYmmPxKPP9+No1dlDH1fjE4u/xrrvu
yq1OENVpiXqhOP9xL9J1Yp555olfh64f87fp8+t19eY2kvGl+XFtGrc6X6cL
3isy9MFYvMJ+jEvxNLeTxj+qn8FN5vsQX+ziXPP1u8ZTHufiSPPzS2nc+G7m
xzJrzOT65tcuHGJ+/jy932qzas4Izbmn3Hz83HGCKMaPQs8Exo1iHOue/ojN
0u9ec621MrcRh/qFqp/ohtbcs9yD42MefPDBuV5PHnvsscKss87aL3Ib999/
f7KcDzTx+QDdqpncRjJGuPib+b7Vk7a4jMvH51H/6LyojZ98zVr7NSvlMDS3
XnJ/jQnJc07RTz75pDDFFFPE5dF8MpXmyAV6WTO5jeS9sZ5xad6BVo9ZUZta
v7/i3BbKg+YpOe5Ofc3+9re/5VqeZgT55BVa/Ln1F83kNuLQnCaag1xrKGne
HeanS6iWo0gbj5LYr2pOJNp/tk6+lhzMbP7ZSyPfSfXD+z4KPf//Joqvo/gy
Cs0rozn2NM5Hdb3mjNJ8Uk+7eNTF/ebHXyqPd435sVl63n2W+TGdGn+uvje/
Nv+sb3fzeZUtzK87pLyK5q7WvE5Lm+/zvJj5eZaUY1FecB7z6wxozr4fR697
BvN9B9U3UtcJ9bucyHzOpdkci/I5wzO8j82E3n/NT64chXLL9T4/G9uf8fTT
T8/1WvL0008X1zqcZpppiusZhKG5q9WeTo5P6dbchsbWTD311HE5n4u+C0B/
0qrcRrIu0/g4rbOiOQdbcb+8TXz8bbbZJrf6QHPkJV/rcccdV9f+J5xwQsn+
GquneX3yon7miyyySFweXe+ZTxT9UStyG8n2suYp0Xp4mqNphhaUT+1b9YEr
LLzwwrmvEX3ooYeOfb16TvXwww/nWp5mbLvttsnPbtsWfFb9UStyG2EbQOus
aF7hTo1b7VquwjigRm6ibDxKYt8s41IO6OTrycFB1t777zxCvxHV+cppa31y
9XPQvFXKp+heU/NgaZ4+5VTuNp9XV3+Va11cYX69gvNc/Nn8HOGaj079VvRd
+k30nu1rPhe/s/m6T3kWzZenOQM13lJzrD3bwdesObnUz0Z9aLLM16M8TnGu
U40tvPbaa3O9lnzxxRfFvtvq8/DAAw+Uhfp1HH744cW1EuPX3K25jbfeeivZ
9lcej7Y/+ptW5zaSEY9ZOdD8OiuNOiY+Zp5j0ZNzbWhsSj3zZWhuPY1BSb4/
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
S6wg0bX+0wYxjcU+jksvvXRhypQpVn5L4lItvo2ePXt67/veFu8vIWlRqm8D
/oxXRfeN6yjZxJu2UXoY52/ZsmXhzjvvzHwsuOaaa7w16Yp1m3/99deSj4O+
JN7jLLXUUtb62vpiUc7L4D4SYoNSfBvo44S5FJ6HbpLdWtW5rg3HH3985mMB
8uw8tcWKKsfHgnHSewyM11988UUKFkczduzY4vkdW8YrLZjRvaw2SvVtoI4W
fHF4T0cNjXL6O9Yc8Ftk5W9gXgpJgAGin2f0YUb9jBNF51nmCcSAo6ZVcex5
+OGHrfyWxKUafBs///xzYfHFF3dtRExMR2t3l5D0iOPbQJ071Di/RHRPbBv5
s2e59tioJ/ryyy8XllxyyUbrkZdffnlJx0B9i912263RZ7vmmmuW5SNJAk8P
KGgHC/eUkCyI49tADY0xouN0beRmzanrttVWW2U+FmC+46krXNQBBxxQ0jGQ
47bppps2OkaPHj0Kf/zxR0pWmxkxYoTXlrMt3NNqIY5vA73OXlO6QGkToT+j
CcgDifA1PJvgueLkpbyb1PlITYK+nycrbSh6/TCvzOnhfsIJJ1j5LYlLNfg2
Hn/8cW/NP9QSsB2bQ0gamHwbiDcdKzreFOszNnNo9xGnl0CfPn0Ks2bNynQ8
QH0/X+52sR8A+gLE5eqrr25URxQaNmxYilaHg7qonTt3du1A3es0Y+4JsUmY
bwPva1gTOlR07KvNnCw8f3gOCyuuuGKxLk/WnH766Y0+n9atWxfuvffe2Puf
d955TT5jWz1S4KtBXo00+Ob3tXNbqwKTbwN9Tm4VnfeOnJO6rKMRBeIxYvga
RiR4vrh5KWsldU5ScyAmohqe5+1E1/AuxhbaWguMQzX4NgYPHuwd3xmvTWoV
v28D/oxXRPc56Sj5qcGAd4+PlYr53DbyOG699dYmcz+sdSKe2wTGYuTRtG3b
ttG+yGtB3xUbYAz25MYwXpvUMl7fBnJO3lM6X3Tf1jT715UCnj88h8XnEs9n
1rzzzjvFnGbxjFGoV4EaGiZQd/Tmm28utGnTptG+8AV//fXXGVnfmLfeestb
9wMxOStZuq/VgN+3AX8Gck7+I3pNo5k906qDmHEUifoZYualJOZPIcQSrZQ+
VSo0a9asMGnSJCu/KXHIu2/jm2++Kay11lqufagntqXF+0pImiD+Gr6N95Uu
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
8QTjyujRo4vjDMabLMF4il58Dz74YGGrrbYqjre+60UO4umix2dCCCEkabDW
10d0PYpG7x+o87T++usXTj311MKTTz5ZmDlzZmq/h6hpit6N6Oe60047+XsD
uHpTdDz7whVeM967jhBPb4UAoa7VYOGaAiGlgNqW6HVyhdKXUv583xX8EptU
aNO6omNGZviP37Vr18KQIUMK999/f9HPkRZYv/zkk08KN910U2H//ff39wZw
NV103YwOFV4vwD2YFnAOV1hbHiXsgU1IKWDugPEI7+ZTpPLxDX7Ggyu0CePF
uaLHj0bHX3LJJYvjDcYdjD9p+nExfsJfjPEU46pvTQrC+Huj6PGYEEIISRvk
ayAWArWqfhffb2Tbtm2Lfo7+/fsXrr766mLeSiW/k8i//Oqrrwp333134cgj
jyzGUgbEaLhCLiryxMNq6ZUDfDr7iHm9BfHbpyZ4TkJqlaVE5zo8q/SzVD7n
dzUmIftQbxNzauR2/+g/T6tWrQrdunUr7LrrroXzzz+/8MILLxRrYFTCjBkz
Co899lhhxIgRxZ4GmO/78upcoY8J+h6uJMnWwkDc+scB5/O+V6GOSVhvBkKI
BvMjzBdQqyyoP3W5ekPKj8/ygnED4wfGkc/858G4g/EH4xD6SmNcwvhUCRgf
MU4iZxjjJsZPjKMB14jxFuMuxt+WCVwrIYQQUgr4jVxb6WrRsY5NejKiFhR+
w7D2uPHGGxfXBc4666zCmDFjir4K9GdFPgt+9x5//PHCuHHjir0KLrroomI9
j2233baw/PLLF9q0aRM218ecG3UvEEuCOqHzpXi9qK3xdYANXl0iej2aENLA
gqLXMNGDNE6vk1IFH8lqKdiNXBn4LBEH9pP/vPCvIo4a+eGo7YlccbwPXHvt
tYWxY8cWxo8fX3j66acLL774YrF2B2KvkeN+5ZVXFoYNG1aMO1tllVUKCy20
UKFFixZh14acEdRTPUxpkRSu0WVl0e9Pps8ZMfXtU7SBkGoE8441RMdoTBdz
HfJylUbuK2KxkAuI8SXQD4NxCeMTximMV0OHDi1cccUVxXEM4xnGNYxvGOcw
3mHcw/iHcbBv377F+mcYHzFOhqxHYVzF+IpxdvkUrpEQQggpB8y5kbt9jdLb
Sn9K8r/tXmG9AXEj/1HqksH1uaA3yicGuxC/jR4rYT1mCaknOovODUMtuzTH
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
DHKbPf1SkHfHXItSovg2vEKNW+SsIP6F+YtRyIVvA8BnESV+Y3KPgXk+IlJc
YL3+Pcnct+EVeqzgOj5XaTul6jkeY3fR8SLWQQcdZNe7MMG9995b5rjxnJs+
fXqkfX/77Tc7VsO7f7t27Yz2F7v++uu94xmd43NGSBLI1Lfh9fdhvnOz0j6S
33rryJWeg+9FLc4vvvjCmE1IB/y7bq4H+qKglqg3PiJJvo3nnnvO7qXrjA01
5VhLjhQjmfg2vPbtT6UHRMc0Nc3j+KoqTcP3In7VZNzt33//be22225lfgvk
n0Rh3bp1dt1R776YQ5kCeT2wt85YUEeK69qlZOrb8N4X+C1vUtpbzOeqJpdc
+TaAnZ/CmqIkp2yp9IFUzLfhFXIqx4vuJZur94H/up+P+AcT4LnWs2fPMseK
eqKovxGVm2++ucz+m222mfX555/ncdThoE+6ZzzTcnSuCEkS2fo2vELsqpuz
ko9+ou3d72rfvr1ta5IIegN4Y7nx/xcsWGDtu+++ifRtYGzox+2M7Q/hehwp
TrLxbfjf5z4W3Wels+Q+Bhd9WxAvYsd7YZ3HFE8//XSZY0ct0Uz6uk6cOLHM
/sivWb16dR5HnBo8Jzp06OAdz545Pm+FTLa+Df9zHzkrF4nus0K85NK3gZgM
+jZIbtladMxFrnwbrhBn8aHSYNHrkhXJZbvR/VzkRJrgn3/+sddU3XGgD+2E
CRMy+ow33njD7pnufgZ6p7/yyiv5GXAE4Pf31Nr+TJLVN4KQXJAL34b3HQC+
22dE91nJVR2yXu53HH300cbsQTruvPPOkrpBqIeMenzwY+yzzz6J9G0gF7BV
q1bu2FBvL876UITERUV9G17BB4G6fainlqsaXK2UVuHzW7Zsad+XpjjqqKPK
HO9VV12V0f7wyzz88MN2DO+4ceOsxx57zGg/2N69e3uPp3eOzlcxkAvfhve5
P0903ihqfnOeDOjbyDXwKaP+JXIFUfu5keg+puhnjOsZ803MZ+ErriW6/wP2
QTxqVQPjTTroPfip5N634RVqVT6u1FMyj32sqfQoPge1qqPkReaDX3/91e7N
6B7TpptumrJ+aCpmz55tNWrUqOQz4FdADqcp5s6da+2www7ueOYo7ZjhuSEk
6eTStxE030G99f1FP3+y5XL3c5NaRxR9neDPwBiR4+36dVEPOam+Daxrdu3a
1R0b6kN1q8A5IiSp5NK34RVyVh4Ufd80k+zXp5Dzgrxlu7eHqbg02CpvvTTE
dM2YMcPIWHLFFVdc4T1fV2Z5foqRXPo2/M995KpivXU/yW+uarKJ37cxMo9H
Y5pOSo+IvmZR/xI5tJi3viY6duglpReUnhVdWwe1YR5TmqT0kOjcwvuUxind
o3SX6OcCepveInqeOlxpqOj4vMFK/6d0hdKlomOTBomuw3S20hlKpyoNUDpJ
qZ9SX9G+PfhQj1I6UrRtP1TpIKUDnOPYV6mj6D5Eu4uOdW4j+v1ye9G5c/A7
bCXafw5fDvq1biz6vsWcHb4b1LaoiM8GMRX59m147YJbrxvHvkGE8cF3NQP7
N27cOHJ9i1yDPHNvH7DmzZtnnE8CX4g3bqNevXpG+4ihV0qXLl3c8SBm+6Cs
ryJCkkm+fBteIUYN9fnwjMimz8p497OwFpg0kKN+8MEHlxzviSeeaMexAfQV
SKpvA/j6uZyX4XkhpBDIl2/DlVtPDXNj+HFrZji+c93PMpVTDKZMmWL3Q3HH
gpguU/kkuQLPC895ui/zS6doyZdvw6u/pTRXtfL1Wcmtb+PCSlxLdCel7ySe
d/BMhH7JWBOC/Ud+FmJfEX+H+S6u/eVKS5X+Eu0HR8zfYkcLlRYozRe9Boga
/ahjM0d0D+YfRfci+d459m+VvlH6SulLpS9E5xLAN/GJ6OcP8kBmKr0r+t7G
vB73n+v3QTw1fD6IhUDvc8RZ/RHzb7beOX74o9CPYGNJzZbO72D3Rf/pp5+M
PEN++eUXq3v37va6A+qZoqbUokWLMvqMe+65p0wvWMR+fPzxx3kacXoQG4r3
FGc8uHb7hpwHQgoR1FiA7zuuZwFsOews/NtRYjkwH4J9tm3D1KlTjdmDVAwe
PLjkGGGDEX/mknTfxsiRI73nZ0TWVxEhyQVrc3HN3TB/nS7aTxg1luMmd/9b
brnFmC249dZbyxzLqaeeWm4bzInQIxa1etD/7ueff7aWLl1a4stNGshz9swp
X4t4PioDiN+fJvHcE3j/w3P/OcltncFkk1vfxqRw30aP5Xk8EtMg3irO928q
PsGfgzUB1CX213tDXAl8QHY8IeIKC5XTTjutzHHvtNNORnM1wXnnneeOB/6m
UaLjig6nqCIQYuUQOwf/rwm7Bn814gE7SWr/Leai8EXbPT0++eQTo/bAD9Y6
URcI48McGvnlXpLu20A/Xc/5eFGpSwKuS4rKlQ4R/U5lwr5hrQ7x0OhjF+bn
uMfdJ9MaZbnkoosuKjP+u+++u+RvWDNDDMQRRxxhxwfDFqOmGoQesehxh1pv
X3/9tbV+/Xpjx+AHPbU8fWCx/tk1AdekaeG5Dx/DlzHfD66Qs5KLXNVkkyvf
xjPd97d9F5W31kZJf2yqaIX4Fqx5niWldazQU3YZ/g5fAOKjC5HXX3+9TK0N
CLmSJvn++++tNm3amD7nFFXsQvze66LraiDv0PsOgLy8r7Ed5qizZs0yahO8
IFbNW4cf65z+OoBJ9m2sXLnSjrVLwPmnqGIW1q3Raw/xGahB4O+z8pC77eOP
P27EFqDGR79+/cqMGz1TwOTJk62dd9450rHCvg0dOtRoPVQvqIWagPNPBQux
BoilQa4qag0UV0xNLnwbT/dsKZN7fp82ZgPbFS+oz4D8DdPXK5V/IYbgN9H+
fsR2I1/CateuXWL7I4axZMkSq1OnTmWOEbme8+fPNzquk046yfR5pqjKJNg1
PMP+J9quoQZ2LdFxa1b16tWN2wQXrE2effbZJWOHDxQ1h/wk2bdx2223mT7f
FFXZhFgON2fFXZ96xv37iy++aMQW/PXXX3Y+sXesM2fOtMaOHVumjlpU9e/f
31q2bJmRY3FBj72GDRuaPt9UeiFXFe8zz4uOJ8FzH3USC5uK+Dae7dnLrg2a
Nl5D/R3bFj99RNcQRQ0KzAcR+4O4X+Q6Yc64SOl30fUjUN8C6/1YM0OfDtTB
WCPax4xrzfT1TqUWzhnitIeIrs9q//vuu+9u9FmSDVj7POaYY8ocX5UqVaz7
7rvP6LjgI/L2tKUoKnahjtDJop9ZVo0aNew5eBJAPyp3nBgX1jaDSLJvo2fP
nqbPL0VVZmHd+r+i5+z2v02bNs2ILVi4cKGdV+KOA/l1yDHx1hZF7h1qJl98
8cXWzTffbMdnoK7aLrvsYvud/cf3f//3f0aOxQXjT8A5pjIX3l9RZ7CwSefb
qLAqjV/DBfVvEde7m1J7pT1Fx3Sg7wjymzqLzqk9WOkw0flnRyj1UMLvhP4l
WDPDtXWC6Hfnk5VQgxU9T9D7BDkR8Dufr3Sh6Jgi9EpBzxTkxqDPxzDRMXjI
p0adgjuUxiiNFV33Hj1ZEIuHHi1PiK7Zif4tyLl4WXT9OMQpo5c4/NzviY7r
+1h0fjjqhaJ2KOqIzhbtx/lVtA8HdTjhv4HvBjVL4bexe2wVuBCbPcI5b25+
+k7u33fddVejz5JMQS6k93nq6oQTTrDrU5kE67L77ruv6fNNUZVRsN94PqB2
L3piwTdvz58zrU+cD7755htr2223LRkveo2kIsm+DV+PFIqi4hHWphCbhrn0
tqLnu/bfEGtggl9//dXac889S8aIehroU+f+N2q5wX+7atWqcvuirujVV1/t
rWthq1mzZtann35q4Gg0999/f5na9FTihbX3CaLfPVFHsLDJm2/DjuW4t8jz
UAoJ5FJVdVRNdMxRDUeIO64tuh8hVFe0j6aBI7zHI04J/U7R53VTpSai+742
FV2naQvRPUOgrZWaO8I9gmuglejnCOpTYL6M/K62SruK7jOLOp3w/Rwouv6U
W3MIvhvUvjZxr7v1hR8W7c9oLOX72eJYEHdj50QmtV61F+RiIq8U83z/Mfft
2zcxc/8XXnjBqlWrlml7T1GVQbBh74v2m8NeuzGpqLcxC9tg7uztQWKCFStW
WMcdd1zJuPfYYw/rt99+S7l9kn0bP/zwA2PTKCoeIW8YtSyx9od5p7cm/KPu
dqniv/LNnDlz7PiLoLEfeOCBgfl2flBH2a2r7Ao1PEzlSWN97JBDDjF93qlw
Ye0ZPSvh58O7mr8WTeGS17iNHvN175Tu+5s+TFKwIP4F8SBx3u+IQZmsdJpo
H04YeA+wY7Z32GEH648//jDyHIkK6mijjoXfn4647jPPPDNRvhk8k329W/Du
hb7Aj1BUEQg+08fF6bNkQMiBRH/ukaLjCoNqicG3gVg9ey3x888/N2oTRo0a
VTJ+xGuny49Psm8DIJ/ecz4QC/xgAq5LisqVEBts+0YNCLnduKcQg4ZeKVjD
C2Kcu8/EiRON2AHkBsNP6z8G9ER56623In+Ov9cK+qi88847eRx5OO+//779
3HDGgzXKSQm4Jk0Lz33Eyi/K8/Uf9tzHM/1W0WvKxVVD1CXvOSkldTteYAwH
yQLk9aDOTb7vd+TNIA/nXNGxJDUijq+50i/4DNTfnDdvnrHnSBj//vuvNX78
+DKx3K7w/BwzZozdNz1JwLeB3gfOOJHTdGJWVxAhyQXrh7A7cc5tUE8PPsLj
RMfZhYF5z9vYD/5Qk/Pkjz/+2LZV7nFgHp+OpPs20OfRc15GVeRCIiShwHca
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
c+jbyC+onYL8dLd2q9WoUSNrzJgx1t9//23aVGXFggULrEsvvdTacMMN/e/W
iBtgPFp+QZ2J36S8jUoXywWbMylgP1yXvSJ+d2fPfodmPnQb1PtB3aAznf/u
4/nMdL4N9JL6yNkWOSn+3jEkfnC/ny46V9I+j7ALl1xyiW0nCpEVK1ZYd999
t22npex9ghxSxqMRQgiJAvzgw8STQ7zJJptY5557rt0ztVBYtWqVddddd1k7
7LCDf/6IdfKdjP26lQus5QXllVyTZj/EmHpzNVz9LNHzaoc6+2DuvmnIdsiJ
f9PzHfB7pYspwTx+tmefmyKOCd81XnSPRzfu/HXP59C3kX+Qnz5AdF8k+3dH
jdGjjjrK+vjjj02brYyAzxk9rH0x2sgtRI5Vup5ApOL0k2D/6+g0+yF3o6RH
mUewVVF7Jd3u7PONZPeOB9/yy6J9LG4tlmM8Y0nn2+jh2fZdYXxQUsB9f4B4
coxhH2AnYC8KiU8++cS2y7DPUnqtwW4PFNYPIoQQkjnIBy7zfokYR/jQ//rr
L9OPvZSsXr3amjZtmrX//vv75/yIHxisVMvUD1oJmSDBc//uafZDXMQfAfuh
x2CUXHT4MtyaGGH17VyOFx2XPU/p/yJsj7qkJWtjEr0WLWKy4Z/x+jDo2zAD
cgamief6atCggXXllVcm2oeLGs9ffvmldcIJJ1jVq1f33hvoBYkY7XQxRyR3
XCjB9u2cNPvBt/5zwH7wsUbxU6Bvk9sf5YJsBi76WQi/iPd6ycS3cadn26c9
/458k06i44YQQwA/W9TaqCR34DwgB6+kRyzsxX/+8x/bfiS5Vjzs71VXXWU1
bNgw6P5Il+tFCCGEhIH160fE16+ic+fO1oQJE6zFixebfgyWgLqnU6ZMsU4+
+WS/nx9CTnRF6siT7IAvwn8uEC/fIc1+x4knb9ijGyN+b29ne/SLTdeH0WUb
iV6TzPsOAB0ZYR/EeuB95mTfv9O3YQ7USxgunhgOaMcdd7RrKf/444+mzVoJ
yAlEzvnFF19sNW3a1H9fwAeNd8l0eV4kt8AP6j8XiHc8Js1+7SQ4l+XZiN97
mZTGebTOeNQ6h2WOlK8TFNW3gRiNbzzbjnP+HbWY0f8KdY4eFZ3rh+NEP5hL
hb1R4gb2AP6lMmtUsB8XXXSRbU+SlGv8008/2XYX9lfK3heLRdvpjQ39joQQ
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
DkFs5Q==
    "], {{0, 345.12}, {517.92, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{150, 150}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{517.92, 345.12},
  PlotRange->{{0, 517.92}, {0, 345.12}}]], "Output",
 CellChangeTimes->{3.825023794217602*^9, 3.8250243687399864`*^9},
 CellLabel->"Out[342]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzEvQecXVXV/n+cuTOTSQEEgdBBBEUFRKVKLwGRloQWQklCAoEEQugldAiI
gLwQpbcEkBJaAgEiocOL9CYdKyooWFFE2u/7rGfvfe6dBEh8P5//fz44Tu45
d5+9V3nWs9YuZ+vhB48etd/wg/fZc/iymx84/IDR++x50LIDxh3IR+2fq6pG
36pqm96/4u+Pq8r/6/mzAP+b/eP/vz59QX+1v/fee7/61a/+8Ic/lDtXL3c8
r786uXbyySd/97vf3XnnnW+88cZ///vf+c5vlTt/Hm394x//OPLIIxl51aZf
7UsvvfQdd9zx4Ycflra/2eMbTz755De/+c24OX4dcsgh//rXv3Qpf2O1Ht94
4IEHVlpppfob++6779/+9rf/L7+xYtzz8ssv33777U899VR81mueWlgh5Dp9
+vSNNtpoueWWW3311S+44IIPPvhA1zrnqaUv5b6stdZaLXK/99578z0d/0WL
t9xyy/zzz1+32NnZ+f3vf///0iKWs8ACC9Qt9urV6/jjj9elNfSr8fe///2P
f/zj22+//e677z4y1+2vpV/9+MqDDz44Y8aMu+++m3sffvjhn/3sZ/zmbz5h
LP/7v//7zjvvVL+I1m666abPf/7zLT058cQTdSnsufv999+/5557DjzwwAED
Bmy44Ybf+c53ttxyy4kTJ7744ovVw/PYM3wHr/li/Cy11FJf+tKXvvzlL/Mb
DfHJkksuudtuu+F+n9mz8Ju+SGfChAm08/Wvf50/zjvvvNNOO23kyJHLLrvs
KqusctFFF+GbD81bD7v5ymOPPTZr1qzbbruNa+3tuq3RaIwePbpqmzlzZtX+
+OOPJ5987TN6GX4031tvvTV27Fg+XX/99VECyuHjjz766C9/+ctVV11FX/n2
oYce+te//vXBue7ruvrVQUdXXnllrnAX91a/+Yz+fCO+9Z///GfSpElYMEL/
6U9/WoWHdVx88cVYeFdXF3/getUD89iX5557Dr/lyqqrrvroo4/OZV+effbZ
1VZbjSu77747aJn68rvf/Q5b41NGxxjnuS9PP/20+8L3MfXP7Muq8S3s/H/+
538+97nP9enT5+yzz666ApVQ1JgxY6r4OeWUUzCP++e6N2Gl7fQAUzz33HOr
Dv3qg5kiYwIDhsv9iy+++BFHHHH55ZfzzGuuueZPf/rTZ1q/+ws84Etc6d+/
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
Kz9t/OxfhpYvXx6cjMsK/yiihSrlrIGWWbNmOdccdojkiGC/HKF4pbREe2ja
V3KkXZ0tW7bAMFHToh9/8Sb0+vSnPw06mRyI8PPm5Rz+3sjSmDFj4P2usrSf
HP4uq1mortjR5MNMp29lCUevXLGjCQei5RcvXrx9+3b1gH2gWymCZZctW2ZQ
DFyyZEmqQQQ5ihyhA5UiPhM+BEbVimGk69ExvipF7TBO7Kmj9pBcE2Lhas+e
PV7ZsBrNIwJRWkfFLq2/RUfuc9F23XXX6SaYtir+tRViftOnT8ec7V+OsLOx
ykS4QHyiGsae2JB+oIivHio7hBlGmQh/d999d+jgs88+O3Z53778iG/gDRRC
Aj9hjnvgGH7A9DJFZvPkQUoN0ejmzZvj5IukBvWscwQ97qx4bdj0XnvRfymh
l8lFBdI+kJxEEeuQ6TkKCZlYfRjun//8p6qjI+Cg4b/Tz3RIZPBXpAgQWtOv
MTClp6hnZ3H/AKWo1DNc7+GqenwgPCKiwQ3lPRYvfJl++Nmxx8ID3e6x/PCH
PwyZUIpNZ/b1Yh2NKA6m7CpDaDbin8jwj3UsXPlNmzZJhvBfvH5do4HB2717
t2RIjV/0AwFg+VDJEC+gyvpnC+jVSYTVSy+9tFxPsa9kqaPsMzIUHMItlJY4
CSj+K/2ckw52FWDAgAEo+1hHjBgXLfrwww9HbmIlS2DOnDnuK+k9UBOrASi7
1atXt/alTFkdkvCp4DsrUp5w8Nvf/hbfDrximp955pku0jS0V9ICeDBykVmn
GC5m2eWcXj0LAF84VnVxUgiAtLMKW1b4pZssgIhWPvWpT6GTxS+wv+/eJ395
x44dXaUHflmzZk2/jCWfd5ISAipJz4IFC0J6GIfHupUehLUPpae9LD1wr9IH
XA9v2LAhZqY2Rna+uE8tUXPt2rWRN3DUUUdhjzuy1Qf7sA1GZN68edu2beuF
5LQUkqP7aCnPp9NXiUGCBkgW/mn3EnTKKaf4OYvIJvrc5z5X1OYZP358ZeW/
ryQJvyr856OPPvrpp58WVt58882wjEgw/lb3lgnkfyD9GgNTmhqkr1Qxe2tZ
i64mLtF6D572nOKo4gqRi64j9Uw4PuKRvN6fPXu251hGJh1ayIxVPYtV/iIf
i+gK6wojRI3wdnBhnagzumGBoot8IXuRyeL76qI/nB34xSHFKZQMFjXWGo1T
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
lveuvjuvNv7lfwE4lhyU\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"a7c729bf-ead9-4c3b-9fb2-7bf11e1899c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Our Network", "Section",
 CellChangeTimes->{{3.825010952344578*^9, 3.825010956921481*^9}, {
  3.825011010690596*^9, 
  3.8250110322228765`*^9}},ExpressionUUID->"c9ce18e8-9c66-479c-8538-\
a872982a0f6d"],

Cell[TextData[StyleBox["We have six nodes: two inputs, two hidden nodes (in \
one hidden layer), and two output nodes. \nThis is a full connected network, \
where each node is connected to all nodes in the previous layer, and to all \
nodes in the next layer.\nEach connection has a weight (w), and each node \
(except for the input nodes) has a bias (b).\n\nLets say that we have \
randomly initialised our weights and biases as follows: ", "ItemNumbered"]], \
"Text",
 CellChangeTimes->{{3.8250112868981237`*^9, 3.8250114757614846`*^9}, {
  3.825015406044626*^9, 
  3.8250154068917074`*^9}},ExpressionUUID->"d4dc9c44-0ef0-44df-853b-\
c2e0af24f3f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weights", " ", "=", " ", 
  RowBox[{"Dataset", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(13\)]\)\>\"", "\[Rule]", " ", "0.72"}], 
     ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(14\)]\)\>\"", " ", "\[Rule]", " ", 
      RowBox[{"-", "0.31"}]}], ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(23\)]\)\>\"", " ", "\[Rule]", " ", 
      "0.10"}], ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(24\)]\)\>\"", " ", "\[Rule]", " ", 
      RowBox[{"-", "0.92"}]}], ",", 
     RowBox[{"\"\<\!\(\*SubscriptBox[\(w\), \(35\)]\)\>\"", "\[Rule]", 
      RowBox[{"-", "0.37"}]}], ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(36\)]\)\>\"", " ", "\[Rule]", " ", 
      "0.43"}], ",", " ", 
     RowBox[{"\"\<\!\(\*SubscriptBox[\(w\), \(45\)]\)\>\"", "\[Rule]", " ", 
      RowBox[{"-", "0.19"}]}], ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(46\)]\)\>\"", " ", "\[Rule]", " ", 
      "0.78"}], ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(b\), \(3\)]\)\>\"", "\[Rule]", " ", "0.01"}], 
     ",", " ", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(b\), \(4\)]\)\>\"", " ", "\[Rule]", " ", 
      "0.38"}], ",", " ", 
     RowBox[{"\"\<\!\(\*SubscriptBox[\(b\), \(5\)]\)\>\"", "\[Rule]", " ", 
      RowBox[{"-", "0.13"}]}], ",", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(b\), \(6\)]\)\>\"", " ", "\[Rule]", " ", 
      "0.78"}]}], "|>"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8250123824492593`*^9, 3.825012385333809*^9}, {
  3.8250124163227186`*^9, 3.8250126275469933`*^9}, {3.825012683322648*^9, 
  3.8250126866344337`*^9}, {3.825012798948406*^9, 3.8250128448943157`*^9}, {
  3.825013001574835*^9, 3.825013005750574*^9}, {3.8250131169867525`*^9, 
  3.825013151030388*^9}, {3.825013197444962*^9, 3.8250132055904217`*^9}, {
  3.8250132572342014`*^9, 3.825013282575233*^9}, {3.825013395930649*^9, 
  3.825013406530434*^9}, {3.8250134615593147`*^9, 3.8250136727776227`*^9}, {
  3.8250138243033314`*^9, 3.825013847849881*^9}, {3.8250153765549955`*^9, 
  3.825015403717351*^9}, {3.825017021871681*^9, 3.825017066583508*^9}},
 CellLabel->
  "In[343]:=",ExpressionUUID->"16ff6dd3-69ca-4883-a002-5a8772db865f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "\!\(\*SubscriptBox[\(w\), \(13\)]\)" -> 0.72, 
       "\!\(\*SubscriptBox[\(w\), \(14\)]\)" -> -0.31, 
       "\!\(\*SubscriptBox[\(w\), \(23\)]\)" -> 0.1, 
       "\!\(\*SubscriptBox[\(w\), \(24\)]\)" -> -0.92, 
       "\!\(\*SubscriptBox[\(w\), \(35\)]\)" -> -0.37, 
       "\!\(\*SubscriptBox[\(w\), \(36\)]\)" -> 0.43, 
       "\!\(\*SubscriptBox[\(w\), \(45\)]\)" -> -0.19, 
       "\!\(\*SubscriptBox[\(w\), \(46\)]\)" -> 0.78, 
       "\!\(\*SubscriptBox[\(b\), \(3\)]\)" -> 0.01, 
       "\!\(\*SubscriptBox[\(b\), \(4\)]\)" -> 0.38, 
       "\!\(\*SubscriptBox[\(b\), \(5\)]\)" -> -0.13, 
       "\!\(\*SubscriptBox[\(b\), \(6\)]\)" -> 0.78], "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[243.], 
         TypeSystem`PackageScope`AtomShape[60]]], 12, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "\!\(\*SubscriptBox[\(b\), \(3\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(4\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(5\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(6\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(13\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(14\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(23\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(24\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(35\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(36\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(45\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(46\)]\)"]], 
       TypeSystem`Atom[Real], 12], "Meta" -> Association[], "RowTarget" -> 20,
      "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[243.], 
         TypeSystem`PackageScope`AtomShape[60]]], 12, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "\!\(\*SubscriptBox[\(b\), \(3\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(4\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(5\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(6\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(13\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(14\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(23\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(24\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(35\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(36\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(45\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(46\)]\)"]], 
       TypeSystem`Atom[Real], 12], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 12, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     12, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(13\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(13\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(13\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(13\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(13\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(14\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(14\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(14\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(14\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.31"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(14\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(23\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(23\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(23\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(23\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(23\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(24\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(24\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(24\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(24\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.92"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(24\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(35\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(35\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(35\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(35\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.37"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(35\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(36\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(36\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(36\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(36\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.43"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(36\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(45\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(45\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(45\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(45\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(45\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(46\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(46\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(46\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(46\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(46\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(3\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(3\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(3\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(3\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.01"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(3\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(4\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(4\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(4\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(4\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.38"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(4\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(5\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(5\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(5\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(5\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.13"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(5\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(6\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(6\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(6\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(6\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(6\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{339., {159., 165.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{339., {159., 165.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8250237944991474`*^9, 3.8250243689610343`*^9},
 CellLabel->
  "Out[343]=",ExpressionUUID->"8a6c9127-db6b-4af7-be17-d95bfd4d0475"]
}, Open  ]],

Cell["We can then access our weights and biases like this:", "Text",
 CellChangeTimes->{{3.825015417323139*^9, 
  3.825015426664539*^9}},ExpressionUUID->"a8c2be10-1991-4a08-a5c3-\
3470bdccaaca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(36\)]\)\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{3.8250153800634575`*^9},
 CellLabel->
  "In[344]:=",ExpressionUUID->"7ac39043-6665-4cbd-bf6b-effb0a7bdd2b"],

Cell[BoxData["0.43`"], "Output",
 CellChangeTimes->{3.8250237948031535`*^9, 3.8250243693074408`*^9},
 CellLabel->
  "Out[344]=",ExpressionUUID->"3d81e276-7937-428e-b817-22da17ce8bd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(6\)]\)\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{3.8250219009629173`*^9},
 CellLabel->
  "In[345]:=",ExpressionUUID->"584cfffb-7de3-4116-9892-467cd2839e47"],

Cell[BoxData["0.78`"], "Output",
 CellChangeTimes->{3.8250237949128428`*^9, 3.825024369476944*^9},
 CellLabel->
  "Out[345]=",ExpressionUUID->"f6dbdb8b-8309-4059-bd52-106475472c6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.43", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{3.825021891428608*^9},
 CellLabel->
  "In[346]:=",ExpressionUUID->"e7269745-a8bf-478e-8938-9eb9fafdf6b7"],

Cell[BoxData["0.43`"], "Output",
 CellChangeTimes->{3.825023795017804*^9, 3.8250243696432896`*^9},
 CellLabel->
  "Out[346]=",ExpressionUUID->"2bfc5afa-378e-42dc-9a6f-b5a46492f43a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feedforward", "Section",
 CellChangeTimes->{{3.825015251856536*^9, 3.825015271019991*^9}, {
  3.825015462032344*^9, 
  3.8250154638321295`*^9}},ExpressionUUID->"cae38132-81cb-4c06-ae51-\
089f87c0a00d"],

Cell["\<\
Lets assume we have a single instance, with the two features (inputs) as \
follows:\
\>", "Text",
 CellChangeTimes->{{3.8250154656357083`*^9, 
  3.825015494524171*^9}},ExpressionUUID->"88c8680f-da61-481b-b64e-\
e7119b5cbc1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["I", "1"], "=", " ", "0.90"}]], "Input",
 CellChangeTimes->{{3.8250168369720464`*^9, 3.825016885150627*^9}, {
  3.825016969594966*^9, 3.8250170041160593`*^9}},
 CellLabel->
  "In[347]:=",ExpressionUUID->"98ce3a6e-b043-4ee4-a17c-f9a40edea737"],

Cell[BoxData["0.9`"], "Output",
 CellChangeTimes->{3.8250237951457357`*^9, 3.8250243698121314`*^9},
 CellLabel->
  "Out[347]=",ExpressionUUID->"b318b321-64bf-49f5-8f11-6030df78f93e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["I", "2"], "=", 
  RowBox[{"-", "0.20", " "}]}]], "Input",
 CellChangeTimes->{
  3.825015534712177*^9, {3.825016880014403*^9, 3.8250169006836357`*^9}, {
   3.8250169358242054`*^9, 3.8250169378387856`*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"6015aab0-c0ad-420e-b2b9-1c6f53e70c45"],

Cell[BoxData[
 RowBox[{"-", "0.2`"}]], "Output",
 CellChangeTimes->{3.8250237952550817`*^9, 3.8250243700410776`*^9},
 CellLabel->
  "Out[348]=",ExpressionUUID->"760d88fe-473d-4ba3-b2a5-ae65a3549094"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"-", "0.2`"}]], "Input",
 CellChangeTimes->{3.8250168783914404`*^9},
 CellLabel->
  "In[349]:=",ExpressionUUID->"797ab109-8d60-4cd1-a34c-3003ab0115f5"],

Cell[BoxData[
 RowBox[{"-", "0.2`"}]], "Output",
 CellChangeTimes->{3.8250237954317584`*^9, 3.8250243702090683`*^9},
 CellLabel->
  "Out[349]=",ExpressionUUID->"7106fb9c-ca1b-479a-9de5-a6b20ae4613d"]
}, Open  ]],

Cell[TextData[{
 "The output of an input node is simply its input. We do ",
 StyleBox["not",
  FontWeight->"Bold"],
 " apply the activation function to input nodes, as we want to \
\[OpenCurlyDoubleQuote]preserve\[CloseCurlyDoubleQuote] their true values for \
the first hidden layer. Hence:"
}], "Text",
 CellChangeTimes->{{3.8250155479842253`*^9, 
  3.8250156142042055`*^9}},ExpressionUUID->"1fb9cbf7-0a6e-44e7-b19e-\
93e42cd624ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["O", "1"], "=", 
  SubscriptBox["I", "1"]}]], "Input",
 CellChangeTimes->{
  3.8250153472689724`*^9, {3.8250154983241014`*^9, 3.8250155017804856`*^9}, {
   3.8250155319840627`*^9, 3.825015539520047*^9}},
 CellLabel->
  "In[350]:=",ExpressionUUID->"fc69c10c-8b19-40bd-ab6f-b5771bd2d78f"],

Cell[BoxData["0.9`"], "Output",
 CellChangeTimes->{3.825023795525028*^9, 3.825024370378362*^9},
 CellLabel->
  "Out[350]=",ExpressionUUID->"68ba7c16-af90-4cab-9146-a32c02ad65c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["O", "2"], "=", 
  SubscriptBox["I", "2"]}]], "Input",
 CellLabel->
  "In[351]:=",ExpressionUUID->"a5d37dcf-cbd4-4d53-bc16-2a04df70e401"],

Cell[BoxData[
 RowBox[{"-", "0.2`"}]], "Output",
 CellChangeTimes->{3.8250237956277275`*^9, 3.8250243705647736`*^9},
 CellLabel->
  "Out[351]=",ExpressionUUID->"be2365a3-d64d-4a7f-a581-f833d7418e35"]
}, Open  ]],

Cell["\<\
We can now calculated the input to each of our two hidden nodes (3 and 4). We \
notate this as their \[OpenCurlyQuote]z\[CloseCurlyQuote] value, which is \
equal to the weighted sum of the inputs, plus the node\[CloseCurlyQuote]s \
bias:\
\>", "Text",
 CellChangeTimes->{{3.8250156275438547`*^9, 3.825015668560147*^9}, 
   3.825016051587364*^9},ExpressionUUID->"fa03a889-3890-4a84-8e0c-\
091edf6839f7"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["z", "j"], "=", 
  RowBox[{
   SubscriptBox["b", "j"], "+", 
   RowBox[{
    UnderscriptBox["\[Sum]", "i"], 
    SubscriptBox["w", "ji"]}]}]}]], "Text",
 CellChangeTimes->{{3.825015802212902*^9, 3.825015914247929*^9}, {
   3.8250159577104945`*^9, 3.82501606154875*^9}, {3.8250161177464457`*^9, 
   3.825016123412792*^9}, {3.8250161575637465`*^9, 3.825016159259537*^9}, {
   3.8250162108651395`*^9, 3.8250162470834284`*^9}, 3.825019474693218*^9},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"fe9b9893-8fec-428f-9ff7-c33f31e468f7"],

Cell[BoxData[
 TemplateBox[{
  "Syntax", "tsntxi", 
   "\"\\\"\\!\\(\\*RowBox[{\\\"j\\\", \\\"=\\\"}]\\)\\\" is incomplete; more \
input is needed.\\!\\(\\*RowBox[{\\\"\\\\\\\"\\\\\\\"\\\"}]\\)\"", 2, 150, 14,
    24750151716415347654, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.8250160186233463`*^9, 3.8250160476044836`*^9}, {
  3.825016354391225*^9, 
  3.8250163554700594`*^9}},ExpressionUUID->"ec6b38a6-7a08-4ac4-b050-\
90528144b101"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["z", "3"], "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(13\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "1"]}], " ", "+", " ", 
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(23\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "2"]}], " ", "+", " ", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(3\)]\)\>\"", 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[352]:=",ExpressionUUID->"24b340fc-b6c5-4f8a-ab0c-8fe1715f1adb"],

Cell[BoxData["0.638`"], "Output",
 CellChangeTimes->{3.8250237957211647`*^9, 3.8250243707337275`*^9},
 CellLabel->
  "Out[352]=",ExpressionUUID->"59635358-7ccb-4947-aa91-59999345a26a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["z", "4"], "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(14\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "1"]}], " ", "+", " ", 
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(24\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "2"]}], " ", "+", " ", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(4\)]\)\>\"", 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[353]:=",ExpressionUUID->"55d37f3d-077f-4483-af56-6f9241c17f6f"],

Cell[BoxData["0.28500000000000003`"], "Output",
 CellChangeTimes->{3.825023795819892*^9, 3.8250243709127274`*^9},
 CellLabel->
  "Out[353]=",ExpressionUUID->"72422ced-8a7e-49fb-8a4b-ed3d3ddf280d"]
}, Open  ]],

Cell["\<\
We then apply our activation function to z to find the output of the two \
hidden nodes:\
\>", "Text",
 CellChangeTimes->{{3.8250165964578986`*^9, 
  3.825016629518609*^9}},ExpressionUUID->"132aea20-2640-477f-9222-\
27f9d254c498"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["O", "3"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["z", "3"], "]"}]}]], "Input",
 CellLabel->
  "In[354]:=",ExpressionUUID->"f6373c1c-3dca-43f3-b990-10f564e24c47"],

Cell[BoxData["0.6543012180520054`"], "Output",
 CellChangeTimes->{3.8250237959278*^9, 3.825024371124829*^9},
 CellLabel->
  "Out[354]=",ExpressionUUID->"ae96f4eb-b7c7-4ac5-9fed-8d3bca7f33ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["O", "4"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["z", "4"], "]"}]}]], "Input",
 CellLabel->
  "In[355]:=",ExpressionUUID->"952c964d-74cc-49a9-a773-267b02364b7c"],

Cell[BoxData["0.5707716118944918`"], "Output",
 CellChangeTimes->{3.825023796022933*^9, 3.825024371299449*^9},
 CellLabel->
  "Out[355]=",ExpressionUUID->"3757f38b-b5f1-43fa-b5ee-e476164fb489"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["0.5707716118944918"], "Input",
 CellChangeTimes->{{3.825016635338212*^9, 3.8250166417192154`*^9}},
 CellLabel->
  "In[356]:=",ExpressionUUID->"85ac1de7-29c4-448c-a7e1-ea2f832c8f35"],

Cell[BoxData["0.5707716118944918`"], "Output",
 CellChangeTimes->{3.8250237961425514`*^9, 3.8250243714811954`*^9},
 CellLabel->
  "Out[356]=",ExpressionUUID->"3c2defb0-4390-4432-964d-5277e04babc7"]
}, Open  ]],

Cell["\<\
We can now repeat the process for the next layer of nodes (5 and 6), using \
the outputs of our previous hidden layer:\
\>", "Text",
 CellChangeTimes->{{3.8250166514516225`*^9, 
  3.8250166740829983`*^9}},ExpressionUUID->"c2f990d2-f515-414b-a70b-\
e100e98cc100"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["z", "5"], "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(35\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "3"]}], " ", "+", " ", 
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(45\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "4"]}], " ", "+", " ", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(5\)]\)\>\"", 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[357]:=",ExpressionUUID->"ee4db30a-bd10-4950-8e69-6dad378d059a"],

Cell[BoxData[
 RowBox[{"-", "0.48053805693919543`"}]], "Output",
 CellChangeTimes->{3.825023796272251*^9, 3.8250243716537066`*^9},
 CellLabel->
  "Out[357]=",ExpressionUUID->"af402d6f-7cf6-4133-87fb-7becfebc200d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["z", "6"], "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(36\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "3"]}], " ", "+", " ", 
   RowBox[{
    RowBox[{
    "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(46\)]\)\>\"", "]"}], " ",
     "*", " ", 
    SubscriptBox["O", "4"]}], " ", "+", " ", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(6\)]\)\>\"", 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[358]:=",ExpressionUUID->"2ea6d818-81e2-4b21-9bc1-40eacef1f071"],

Cell[BoxData["1.506551381040066`"], "Output",
 CellChangeTimes->{3.8250237964380493`*^9, 3.825024371822934*^9},
 CellLabel->
  "Out[358]=",ExpressionUUID->"1514c884-0fee-4c6f-abdd-e916d4190cc7"]
}, Open  ]],

Cell["\<\
And again, we apply the sigmoid activation function to the weighted sum:\
\>", "Text",
 CellChangeTimes->{{3.8250166811831455`*^9, 
  3.825016699406441*^9}},ExpressionUUID->"5125c0b1-7fd9-4a78-9b9e-\
69bceafee6f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["O", "5"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["z", "5"], "]"}]}]], "Input",
 CellLabel->
  "In[359]:=",ExpressionUUID->"4d79ddc2-52b9-4d17-9f72-eb6440bbb0b7"],

Cell[BoxData["0.38212507897184056`"], "Output",
 CellChangeTimes->{3.8250237965286465`*^9, 3.8250243720148673`*^9},
 CellLabel->
  "Out[359]=",ExpressionUUID->"a5c6b1be-e32e-4373-a458-8bdb973e952b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["O", "6"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["z", "6"], "]"}]}]], "Input",
 CellLabel->
  "In[360]:=",ExpressionUUID->"f549d049-f4a5-4c80-84cd-fa9390692c0d"],

Cell[BoxData["0.8185495592339509`"], "Output",
 CellChangeTimes->{3.825023796637213*^9, 3.8250243722260838`*^9},
 CellLabel->
  "Out[360]=",ExpressionUUID->"afd73107-0afd-46b1-bb39-a48a72cc0961"]
}, Open  ]],

Cell["\<\
For a classification problem, we choose the class that has the highest \
corresponding output:\
\>", "Text",
 CellChangeTimes->{{3.8250167091953373`*^9, 
  3.8250167525028086`*^9}},ExpressionUUID->"0c6cd55c-a53a-4bde-bed6-\
8f80bc73c300"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"class", " ", "=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["O", "5"], ">", " ", 
     SubscriptBox["O", "6"]}], ",", "\"\<A\>\"", ",", "\"\<B\>\""}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[361]:=",ExpressionUUID->"dce52a07-e45f-4241-b56b-e98c03cdb231"],

Cell[BoxData["\<\"B\"\>"], "Output",
 CellChangeTimes->{3.8250237967394795`*^9, 3.8250243723880835`*^9},
 CellLabel->
  "Out[361]=",ExpressionUUID->"c5160042-0ff2-463b-a44b-f293029b844a"]
}, Open  ]],

Cell["\<\
We did it! You may like to play around with changing the weights and inputs, \
and re-evaluating to see how the outputs then change. How much do you need to \
change things to get class A instead of B?\
\>", "Text",
 CellChangeTimes->{{3.8250167607702284`*^9, 3.825016831659398*^9}, {
  3.8250170720070515`*^9, 
  3.8250170802578964`*^9}},ExpressionUUID->"274b90e5-ecf3-4f2b-a4e4-\
e23a85132348"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Backpropagation", "Section",
 CellChangeTimes->{{3.8250171341065493`*^9, 3.8250171587417536`*^9}, {
  3.8250200594270844`*^9, 
  3.825020059595085*^9}},ExpressionUUID->"59f87513-a0b0-4f04-8b08-\
10fbb54bc903"],

Cell[TextData[{
 "Now that we have calculated the outputs of our network, we can work \
backwards to update the weights and biases to be more accurate compared to \
the actual class labels.\nRecall that we use the symbol ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "j"], " "}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "955e2e17-c590-42aa-9dcd-730b75e1fbf7"],
 "to represent the error term or the \[OpenCurlyDoubleQuote]beneficial factor\
\[CloseCurlyDoubleQuote] of node ",
 StyleBox["j",
  FontSlant->"Italic"],
 ". Note that this is ",
 StyleBox["not ",
  FontWeight->"Bold"],
 "the bias, it is the Greek letter beta, not the English letter \
\[OpenCurlyQuote]b\[CloseCurlyQuote]!",
 " Our first step, is to calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "j"], " "}], TraditionalForm]],ExpressionUUID->
  "f03c1908-cf5a-4c3e-b919-aeef777e5e12"],
 "for all of the nodes in the network.\nFor our output nodes, we simply \
calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "j"], " "}], TraditionalForm]],ExpressionUUID->
  "45a4baba-5bef-43ce-a991-9ed6d5387cc5"],
 "as the difference between the true/",
 StyleBox["desired ",
  FontWeight->"Bold"],
 "class label (d) and the actual output (O). \nFor this example, we will set ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["d", "5"], " ", "and", " ", 
    SubscriptBox["d", "6"], " ", "as", " ", 
    RowBox[{"follows", ":"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "ffd020ab-9560-4a15-958f-9158df573860"]
}], "Text",
 CellChangeTimes->{{3.8250171656785383`*^9, 3.8250172082022734`*^9}, {
   3.8250187365759463`*^9, 3.825018737455962*^9}, {3.8250188197334785`*^9, 
   3.825018827045848*^9}, {3.825018889002969*^9, 3.8250190357729163`*^9}, 
   3.8250190721413054`*^9, {3.8250204318328824`*^9, 
   3.8250204491611934`*^9}},ExpressionUUID->"6e73cba1-086c-4dbb-a819-\
759ef93c0f0d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  SubscriptBox["d", "5"], "=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["d", "6"], "=", "1"}]}], "Input",
 CellChangeTimes->{{3.8250190420855255`*^9, 3.8250190627292795`*^9}},
 CellLabel->
  "In[362]:=",ExpressionUUID->"793ceb5b-3b7f-4e99-b636-edee6c0dddc8"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.825023796835082*^9, 3.825024372550021*^9},
 CellLabel->
  "Out[362]=",ExpressionUUID->"bfb98ae7-c8c6-4aa9-9f4f-dcdba444ae11"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.825023796835082*^9, 3.825024372561002*^9},
 CellLabel->
  "Out[363]=",ExpressionUUID->"702cb1f0-4f70-4e24-8d94-fbcdbe026522"]
}, Open  ]],

Cell[TextData[{
 "This is the same as saying that we want this instance to be class B, and \
not class A. In other words, the output of node 5 should be as small as \
possible (close to 0) and the output of node 6 should be as large as possible \
(close to 1).\nWe now calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "5"], " ", "and", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "6"], ":"}]}], TraditionalForm]],ExpressionUUID->
  "f0f1b14f-2697-44f5-9d8e-522c7d234f4f"]
}], "Text",
 CellChangeTimes->{{3.825019094019628*^9, 
  3.825019175674451*^9}},ExpressionUUID->"a3ce2594-3fc9-45a7-88ed-\
2830face324f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Beta]", "5"], "=", 
  RowBox[{
   SubscriptBox["d", "5"], "-", 
   SubscriptBox["O", "5"]}]}]], "Input",
 CellChangeTimes->{{3.8250191908993034`*^9, 3.825019224485923*^9}},
 CellLabel->
  "In[364]:=",ExpressionUUID->"d7a81d51-38cf-4fb1-9ad5-4867cf6d7031"],

Cell[BoxData[
 RowBox[{"-", "0.38212507897184056`"}]], "Output",
 CellChangeTimes->{3.8250237969393024`*^9, 3.825024372720297*^9},
 CellLabel->
  "Out[364]=",ExpressionUUID->"58574af2-04d0-45cc-9d52-6d10458542ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Beta]", "6"], "=", 
  RowBox[{
   SubscriptBox["d", "6"], "-", 
   SubscriptBox["O", "6"]}]}]], "Input",
 CellChangeTimes->{{3.825019238410937*^9, 3.825019242154584*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"74628a0e-db03-4258-9f6f-fa1e83e55033"],

Cell[BoxData["0.1814504407660491`"], "Output",
 CellChangeTimes->{3.8250237970379915`*^9, 3.8250243728979635`*^9},
 CellLabel->
  "Out[365]=",ExpressionUUID->"28fab4c0-70b7-4624-90ec-c5b8b092835f"]
}, Open  ]],

Cell[TextData[{
 "Calculating ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "j"], TraditionalForm]],ExpressionUUID->
  "c521701d-73bb-440d-8f71-4a1a7cfbc078"],
 " for the non-output nodes is more complicated. The equation from class is:\n"
}], "Text",
 CellChangeTimes->{{3.825019275826211*^9, 
  3.825019341307867*^9}},ExpressionUUID->"34e4b2bc-95cc-4744-be5a-\
98d9aec2c83a"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["z", "j"], "=", 
  RowBox[{
   UnderscriptBox["\[Sum]", "k"], 
   RowBox[{
    SubscriptBox["w", "jk"], 
    SubscriptBox["O", "k"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["O", "k"]}], ")"}], 
    SubscriptBox["\[Beta]", "k"]}]}]}]], "Text",
 CellChangeTimes->{
  3.8250193747843943`*^9, 3.8250194386264744`*^9, {3.8250194974663258`*^9, 
   3.8250195588777676`*^9}},ExpressionUUID->"3adff472-f782-4823-9842-\
46c5a88aa22e"],

Cell[TextData[{
 "This is telling us to sum across each connection coming out of node j. Each \
of these connections will take a \[OpenCurlyDoubleQuote]turn\
\[CloseCurlyDoubleQuote] being the ",
 StyleBox["k",
  FontSlant->"Italic"],
 ". For example, Node 3 has two connections coming out of it, with weights ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["w", "35"], " ", "and", " ", 
    SubscriptBox["w", "36"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "db8d1af1-6a90-4b2f-882b-a0a718a92913"],
 " which go to nodes 5 and 6 respectively.\nThis is why we call it \
\[OpenCurlyDoubleQuote]backpropagation\[CloseCurlyDoubleQuote], as we take \
the error terms and outputs from layers further forward in the network, and \
then \[OpenCurlyDoubleQuote]propagate\[CloseCurlyDoubleQuote] their errors \
back to earlier layers.\n\nLets try it for node 3:\n"
}], "Text",
 CellChangeTimes->{{3.825019577050134*^9, 3.8250197538107953`*^9}, {
  3.8250200510511956`*^9, 
  3.8250200537959795`*^9}},ExpressionUUID->"40d3f60e-917d-41d0-bb4e-\
73071e82b900"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Beta]", "3"], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(35\)]\)\>\"", "]"}], 
     "*", " ", 
     SubscriptBox["O", "5"], "*", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["O", "5"]}], ")"}], "*", 
     SubscriptBox["\[Beta]", "5"]}], ")"}], "+", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(36\)]\)\>\"", "]"}], 
     "*", " ", 
     SubscriptBox["O", "6"], "*", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["O", "6"]}], ")"}], "*", 
     SubscriptBox["\[Beta]", "6"]}], ")"}], " "}]}]], "Input",
 CellChangeTimes->{{3.8250197614513445`*^9, 3.825019872651329*^9}},
 CellLabel->
  "In[366]:=",ExpressionUUID->"d25f52e8-4827-4462-b32e-c996c6b6f68b"],

Cell[BoxData["0.04497063899498479`"], "Output",
 CellChangeTimes->{3.8250237971486263`*^9, 3.825024373095754*^9},
 CellLabel->
  "Out[366]=",ExpressionUUID->"02b45e65-8686-4c47-8d09-e034dca80069"]
}, Open  ]],

Cell[TextData[{
 "We have two ",
 StyleBox["k ",
  FontSlant->"Italic"],
 "values (5 and 6), and so we are summing across two terms, which are shown \
in two sets of brackets.\nFor each k value, we multiply the current weight of \
that connection (e.g. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "35"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9d0f8d3c-c55d-4cfb-a063-34811b7c66cc"],
 ") with the ",
 StyleBox["slope ",
  FontSlant->"Italic"],
 "of the output of node 5 ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["O", "5"], "*", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["O", "5"]}], ")"}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "fe354ec9-7aa1-442f-9c14-66da0f1b89cc"],
 ") and with the error term of node 5 (",
 Cell[BoxData[
  SubscriptBox["\[Beta]", "5"]],
  CellChangeTimes->{
   3.8250193747843943`*^9, 3.8250194386264744`*^9, {3.8250194974663258`*^9, 
    3.8250195588777676`*^9}},ExpressionUUID->
  "dbb3bdf9-e87f-4f44-b6b5-c426336ec97a"],
 "), to get an overall error term back-propagating through that connection.\n\
\nRepeating for node 4:\n"
}], "Text",
 CellChangeTimes->{{3.8250198852621517`*^9, 
  3.825020084431389*^9}},ExpressionUUID->"ca0ad539-1902-4580-87c5-\
ff4144c25da5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Beta]", "4"], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(45\)]\)\>\"", "]"}], 
     "*", " ", 
     SubscriptBox["O", "5"], "*", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["O", "5"]}], ")"}], "*", 
     SubscriptBox["\[Beta]", "5"]}], ")"}], "+", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(46\)]\)\>\"", "]"}], 
     "*", " ", 
     SubscriptBox["O", "6"], "*", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SubscriptBox["O", "6"]}], ")"}], "*", 
     SubscriptBox["\[Beta]", "6"]}], ")"}], " "}]}]], "Input",
 CellChangeTimes->{{3.8250200914892745`*^9, 3.8250201004972277`*^9}, {
  3.8250202292612095`*^9, 3.8250202293651857`*^9}},
 CellLabel->
  "In[367]:=",ExpressionUUID->"d93329e0-40bc-4815-ab03-f9991ba52b96"],

Cell[BoxData["0.038163258061166466`"], "Output",
 CellChangeTimes->{3.825023797242673*^9, 3.825024373324416*^9},
 CellLabel->
  "Out[367]=",ExpressionUUID->"65ac8405-2b71-433a-bdd1-6423499a980e"]
}, Open  ]],

Cell[TextData[{
 "We now repeat the process for the ",
 StyleBox["next ",
  FontSlant->"Italic"],
 "hidden layer, working backwards. However, we only have one hidden layer in \
this network, so we are done! There is no need to calculate ",
 Cell[BoxData[
  SubscriptBox["\[Beta]", "1"]],
  CellChangeTimes->{
   3.8250193747843943`*^9, 3.8250194386264744`*^9, {3.8250194974663258`*^9, 
    3.8250195588777676`*^9}},ExpressionUUID->
  "129becce-8c43-43e0-945a-0a3c21d71eb3"],
 " or ",
 Cell[BoxData[
  SubscriptBox["\[Beta]", "2"]],
  CellChangeTimes->{
   3.8250193747843943`*^9, 3.8250194386264744`*^9, {3.8250194974663258`*^9, 
    3.8250195588777676`*^9}},ExpressionUUID->
  "72d95ef6-45a7-41ae-ab3a-a102904ffd5c"],
 ", as they are not needed when updating the weights. ",
 "Note that if we did have another hidden layer,",
 StyleBox[" we always use the OLD weights in our calculations",
  FontWeight->"Bold"],
 ", as we do not change any of the weights until we have calculated all the \
changes."
}], "Text",
 CellChangeTimes->{{3.8250201276671505`*^9, 3.8250201846680717`*^9}, {
  3.825020946197364*^9, 
  3.8250210116463275`*^9}},ExpressionUUID->"db1f0d0a-2b38-421f-9ebf-\
c5e1f6b58b2a"],

Cell[TextData[{
 "We now have all our values of ",
 Cell[BoxData["\[Beta]"],
  CellChangeTimes->{
   3.8250193747843943`*^9, 3.8250194386264744`*^9, {3.8250194974663258`*^9, 
    3.8250195588777676`*^9}},ExpressionUUID->
  "b6a912bd-bbba-4535-960f-f26dc123e988"],
 ". Based on these, we can now finally calculate the weight changes for each \
of the weights in our network, by using the equation:"
}], "Text",
 CellChangeTimes->{{3.825020269312643*^9, 
  3.8250203110604*^9}},ExpressionUUID->"41d538c2-f66c-4a33-9f27-90f0b647a1a2"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "ij"], "=", " ", 
  RowBox[{
   SubscriptBox["\[Eta]O", "i"], 
   SubscriptBox["O", "j"], 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "j"]}], ")"}], 
   SubscriptBox["\[Beta]", "j"]}]}]], "Text",
 CellChangeTimes->{{3.825020370133012*^9, 3.825020408561214*^9}, {
  3.8250204610531425`*^9, 
  3.8250205034896727`*^9}},ExpressionUUID->"419161b2-8c6d-4161-b264-\
05b6d2bffb68"],

Cell[TextData[{
 "When calculating the weight change, we want it to be proportional to the \
output of the node which the weight applies to, the slope of the activation \
function of the next node, and to the error term we have already calculated.\n\
We also have a ",
 StyleBox["learning rate ",
  FontSlant->"Italic"],
 "(\[Eta]), which is a parameter that controls how aggressively our weights \
are updated, and so how quickly our network learns. There is a trade-off here \
- as we are doing gradient descent, we risk overshooting a good combination \
of weights with a high \[Eta], whereas with a low \[Eta], we will train very \
slowly.\n\nTo keep things simple here, we define:"
}], "Text",
 CellChangeTimes->{{3.8250205108647003`*^9, 
  3.82502073952503*^9}},ExpressionUUID->"29cde926-49d1-4bff-a03b-\
05824936b425"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Eta]", " ", "=", " ", "1"}]], "Input",
 CellChangeTimes->{{3.825020742608717*^9, 3.82502074842108*^9}},
 CellLabel->
  "In[368]:=",ExpressionUUID->"6b52010b-1949-493c-89ec-c494470c4c1f"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.825023797350943*^9, 3.8250243734965887`*^9},
 CellLabel->
  "Out[368]=",ExpressionUUID->"ddbc61d2-02c7-4e4f-a9f2-6d21945c4bd0"]
}, Open  ]],

Cell["\<\
Based on our weight change equation, we can calculate the change for each of \
our 8 weights (the order does not matter!). For the connections from the \
input to the hidden layer:\
\>", "Text",
 CellChangeTimes->{{3.8250207619445233`*^9, 3.825020809352726*^9}, {
  3.8250211153448825`*^9, 
  3.8250211413456535`*^9}},ExpressionUUID->"8b7e4ba2-26cb-4c4d-8599-\
ad1a74945606"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "13"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "1"], "*", 
   SubscriptBox["O", "3"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "3"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "3"]}]}]], "Input",
 CellChangeTimes->{{3.825020851889577*^9, 3.825020919601861*^9}},
 CellLabel->
  "In[369]:=",ExpressionUUID->"96469a72-8683-4c7e-99a0-251501a3fcc2"],

Cell[BoxData["0.009154763852239896`"], "Output",
 CellChangeTimes->{3.8250237974918756`*^9, 3.8250243736652074`*^9},
 CellLabel->
  "Out[369]=",ExpressionUUID->"db882745-74c5-4f2e-a3a7-52609d73bf3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "14"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "1"], "*", 
   SubscriptBox["O", "4"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "4"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "4"]}]}]], "Input",
 CellChangeTimes->{{3.825021052681817*^9, 3.8250210600550227`*^9}},
 CellLabel->
  "In[370]:=",ExpressionUUID->"93a5f147-504c-4498-826a-f1b56a7cada1"],

Cell[BoxData["0.008414702295861921`"], "Output",
 CellChangeTimes->{3.8250237975788383`*^9, 3.825024373833208*^9},
 CellLabel->
  "Out[370]=",ExpressionUUID->"958fa297-c7a7-4d46-a423-bf9078615d3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "23"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "2"], "*", 
   SubscriptBox["O", "3"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "3"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "3"]}]}]], "Input",
 CellChangeTimes->{{3.8250210752818847`*^9, 3.8250210778499165`*^9}},
 CellLabel->
  "In[371]:=",ExpressionUUID->"52f8c09e-f478-4c16-814f-abec7e29e279"],

Cell[BoxData[
 RowBox[{"-", "0.0020343919671644214`"}]], "Output",
 CellChangeTimes->{3.82502379768402*^9, 3.8250243740142436`*^9},
 CellLabel->
  "Out[371]=",ExpressionUUID->"eb064015-b436-49f7-8477-ec3e2fc4b2cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "24"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "2"], "*", 
   SubscriptBox["O", "4"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "4"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "4"]}]}]], "Input",
 CellChangeTimes->{{3.825021094244911*^9, 3.8250210968859134`*^9}},
 CellLabel->
  "In[372]:=",ExpressionUUID->"16fc1fdf-24f8-4ae0-8f89-f186401d7595"],

Cell[BoxData[
 RowBox[{"-", "0.0018699338435248718`"}]], "Output",
 CellChangeTimes->{3.825023797785019*^9, 3.8250243741837997`*^9},
 CellLabel->
  "Out[372]=",ExpressionUUID->"184cc60d-21f0-4f6b-bd66-90abedfbf0b4"]
}, Open  ]],

Cell["\<\
And then for the connections from the hidden to the output layer:\
\>", "Text",
 CellChangeTimes->{{3.8250211345375814`*^9, 
  3.825021152133857*^9}},ExpressionUUID->"d88b673a-4ebd-464b-9c8f-\
848f19230e60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "35"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "3"], "*", 
   SubscriptBox["O", "5"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "5"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "5"]}]}]], "Input",
 CellChangeTimes->{{3.825021163927288*^9, 3.8250211722775526`*^9}},
 CellLabel->
  "In[373]:=",ExpressionUUID->"8d15346c-a08c-40a6-b1df-b36ed1eeb8dc"],

Cell[BoxData[
 RowBox[{"-", "0.05903225586586377`"}]], "Output",
 CellChangeTimes->{3.825023797890356*^9, 3.825024374370493*^9},
 CellLabel->
  "Out[373]=",ExpressionUUID->"a0f95f56-c8ba-4fac-a142-c1bb07ba4385"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "36"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "3"], "*", 
   SubscriptBox["O", "6"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "6"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "6"]}]}]], "Input",
 CellChangeTimes->{{3.825021195445922*^9, 3.825021202701932*^9}},
 CellLabel->
  "In[374]:=",ExpressionUUID->"57456fae-21b0-4b09-b899-b3aeee64d491"],

Cell[BoxData["0.017633509768897583`"], "Output",
 CellChangeTimes->{3.825023797995385*^9, 3.8250243745393686`*^9},
 CellLabel->
  "Out[374]=",ExpressionUUID->"4d301a32-03fb-44fe-81de-7aaa4c7f5653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "45"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "4"], "*", 
   SubscriptBox["O", "5"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "5"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "5"]}]}]], "Input",
 CellChangeTimes->{{3.825021212013627*^9, 3.825021214690221*^9}},
 CellLabel->
  "In[375]:=",ExpressionUUID->"079208ac-3173-4cae-9a94-fb9ff0c323b5"],

Cell[BoxData[
 RowBox[{"-", "0.051496061606978484`"}]], "Output",
 CellChangeTimes->{3.825023798101346*^9, 3.8250243747091265`*^9},
 CellLabel->
  "Out[375]=",ExpressionUUID->"6fe7f9e3-30a3-48ab-81aa-5dfa48d3979f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]w", "46"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "4"], "*", 
   SubscriptBox["O", "6"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "6"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "6"]}]}]], "Input",
 CellChangeTimes->{{3.825021229913731*^9, 3.8250212322817507`*^9}},
 CellLabel->
  "In[376]:=",ExpressionUUID->"0c0ea68c-1e9b-4e21-96a2-7104f4eb7ac8"],

Cell[BoxData["0.015382375145373753`"], "Output",
 CellChangeTimes->{3.825023798198346*^9, 3.825024374888883*^9},
 CellLabel->
  "Out[376]=",ExpressionUUID->"d3f96c8e-d05b-488c-8337-2296067e94a6"]
}, Open  ]],

Cell[TextData[{
 "We also calculate the update for the biases in a similar manner. Note that \
our equation for updating biases only considers one output, since there is no \
\[OpenCurlyDoubleQuote]input\[CloseCurlyDoubleQuote] to the bias:\n\n",
 Cell[BoxData[
  RowBox[{
   SubscriptBox["\[CapitalDelta]b", "j"], "=", " ", 
   RowBox[{
    SubscriptBox["\[Eta]O", "j"], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["O", "j"]}], ")"}], 
    SubscriptBox["\[Beta]", "j"]}]}]],
  CellChangeTimes->{{3.825020370133012*^9, 3.825020408561214*^9}, {
   3.8250204610531425`*^9, 3.8250205034896727`*^9}},ExpressionUUID->
  "5093d568-8ecc-4ea5-8baf-b38538ce99ab"],
 "\n\nOur bias updates are:"
}], "Text",
 CellChangeTimes->{{3.8250212565502653`*^9, 
  3.8250213293620863`*^9}},ExpressionUUID->"a3b4f078-cc3b-4d3f-9e19-\
87ece6d3fe19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[CapitalDelta]b", "3"], "=", 
   RowBox[{"\[Eta]", " ", "*", " ", 
    SubscriptBox["O", "3"], "*", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SubscriptBox["O", "3"]}], ")"}], "*", 
    SubscriptBox["\[Beta]", "3"]}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.825021314329358*^9, 3.825021353333803*^9}},
 CellLabel->
  "In[377]:=",ExpressionUUID->"1c1a4379-1750-476c-b7ba-408687d013f5"],

Cell[BoxData["0.010171959835822105`"], "Output",
 CellChangeTimes->{3.825023798297412*^9, 3.8250243750838823`*^9},
 CellLabel->
  "Out[377]=",ExpressionUUID->"c33019e3-005a-4534-856c-206d553a0cee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]b", "4"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "4"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "4"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "4"]}]}]], "Input",
 CellChangeTimes->{{3.825021363359023*^9, 3.82502137163383*^9}},
 CellLabel->
  "In[378]:=",ExpressionUUID->"fd7d9f22-cfad-44fb-8ff4-476e56be6ee8"],

Cell[BoxData["0.009349669217624357`"], "Output",
 CellChangeTimes->{3.8250237983934135`*^9, 3.825024375283214*^9},
 CellLabel->
  "Out[378]=",ExpressionUUID->"f1dcb0cd-c833-454d-ae76-6b73d35a2d25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]b", "5"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "5"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "5"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "5"]}]}]], "Input",
 CellChangeTimes->{{3.825021379234098*^9, 3.825021386771144*^9}},
 CellLabel->
  "In[379]:=",ExpressionUUID->"47af0f39-72bf-4976-adb5-750b88e09ddb"],

Cell[BoxData[
 RowBox[{"-", "0.09022183397673539`"}]], "Output",
 CellChangeTimes->{3.825023798515566*^9, 3.8250243754787655`*^9},
 CellLabel->
  "Out[379]=",ExpressionUUID->"51ba481a-ae4a-4a04-bee7-aefe9a56a57b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[CapitalDelta]b", "6"], "=", 
  RowBox[{"\[Eta]", " ", "*", " ", 
   SubscriptBox["O", "6"], "*", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["O", "6"]}], ")"}], "*", 
   SubscriptBox["\[Beta]", "6"]}]}]], "Input",
 CellChangeTimes->{{3.8250213918412046`*^9, 3.8250213975413904`*^9}},
 CellLabel->
  "In[380]:=",ExpressionUUID->"001376a0-7b36-43a8-a3a6-2044ba89f319"],

Cell[BoxData["0.026950140519983002`"], "Output",
 CellChangeTimes->{3.8250237986157894`*^9, 3.825024375659969*^9},
 CellLabel->
  "Out[380]=",ExpressionUUID->"32e30239-8db8-4f1d-8701-50000385d728"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Finally",
  FontWeight->"Bold"],
 ", we can go ahead and change our weights and biases of our network!:"
}], "Text",
 CellChangeTimes->{{3.8250214138651037`*^9, 
  3.8250214253512497`*^9}},ExpressionUUID->"ebd62156-603d-41ec-993c-\
c4d695ba96ca"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  SubscriptBox["nw", "13"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "13"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(13\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "14"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "14"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(14\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "23"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "23"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(23\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "24"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "24"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(24\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "35"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "35"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(35\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "36"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "36"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(36\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "45"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "45"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(45\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nw", "46"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]w", "46"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(w\), \(46\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nb", "3"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]b", "3"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(3\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nb", "4"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]b", "4"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(4\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nb", "5"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]b", "5"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(5\)]\)\>\"", 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["nb", "6"], "=", " ", 
  RowBox[{
   SubscriptBox["\[CapitalDelta]b", "6"], "+", 
   RowBox[{
   "weights", "[", "\"\<\!\(\*SubscriptBox[\(b\), \(6\)]\)\>\"", 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.8250214418437386`*^9, 3.8250214782825327`*^9}, {
   3.8250216790622606`*^9, 3.825021762504252*^9}, {3.8250218508703747`*^9, 
   3.8250218688615313`*^9}, {3.8250220001629515`*^9, 
   3.8250220374956455`*^9}, {3.825022083001086*^9, 3.8250221276496224`*^9}, 
   3.825022162118538*^9, {3.8250223767039146`*^9, 3.8250225920155387`*^9}, 
   3.825022637698286*^9, {3.8250227094025116`*^9, 3.8250228714244976`*^9}, {
   3.8250232162225313`*^9, 3.825023226610017*^9}, {3.8250232860700455`*^9, 
   3.825023321884924*^9}, {3.825023381635386*^9, 3.8250234032840395`*^9}, {
   3.825023442085536*^9, 3.825023540048199*^9}, {3.825023576253222*^9, 
   3.825023729318855*^9}, {3.8250238136200495`*^9, 3.8250238275152264`*^9}},
 CellLabel->
  "In[381]:=",ExpressionUUID->"e4996e1b-e27f-4053-b5e2-3b76e1740b50"],

Cell[BoxData["0.7291547638522399`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.825024375842947*^9},
 CellLabel->
  "Out[381]=",ExpressionUUID->"9e653240-e75f-48a0-808e-c6a725a16164"],

Cell[BoxData[
 RowBox[{"-", "0.30158529770413806`"}]], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.825024375859952*^9},
 CellLabel->
  "Out[382]=",ExpressionUUID->"5eae56f5-df41-427c-a539-b4ad499f3ecf"],

Cell[BoxData["0.09796560803283558`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.825024375869959*^9},
 CellLabel->
  "Out[383]=",ExpressionUUID->"ee4b2974-b02c-4bb7-955b-0d4610b62d47"],

Cell[BoxData[
 RowBox[{"-", "0.9218699338435249`"}]], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243758769503`*^9},
 CellLabel->
  "Out[384]=",ExpressionUUID->"d04a4280-8013-4a2e-8f59-64489a7b93f6"],

Cell[BoxData[
 RowBox[{"-", "0.42903225586586374`"}]], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243758849545`*^9},
 CellLabel->
  "Out[385]=",ExpressionUUID->"49de8291-e38e-4277-837b-a8b538bdd862"],

Cell[BoxData["0.4476335097688976`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243758934727`*^9},
 CellLabel->
  "Out[386]=",ExpressionUUID->"ed45ebe1-27a1-4622-801a-fc0b10b33f3f"],

Cell[BoxData[
 RowBox[{"-", "0.24149606160697848`"}]], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.825024375900057*^9},
 CellLabel->
  "Out[387]=",ExpressionUUID->"c5cf6415-7451-4434-bfea-66cb92924702"],

Cell[BoxData["0.7953823751453738`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243759050093`*^9},
 CellLabel->
  "Out[388]=",ExpressionUUID->"77b36020-b3d2-40be-aca2-dc0d3a65a3d6"],

Cell[BoxData["0.020171959835822106`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243759095626`*^9},
 CellLabel->
  "Out[389]=",ExpressionUUID->"dfec8638-237e-48a4-924b-2fbb02d9eed6"],

Cell[BoxData["0.3893496692176244`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.825024375914237*^9},
 CellLabel->
  "Out[390]=",ExpressionUUID->"c3869f53-ad6d-4e07-aa21-ef4e221690c5"],

Cell[BoxData[
 RowBox[{"-", "0.2202218339767354`"}]], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243759207582`*^9},
 CellLabel->
  "Out[391]=",ExpressionUUID->"156637f6-87d1-40d0-a88e-77e3518d7469"],

Cell[BoxData["0.806950140519983`"], "Output",
 CellChangeTimes->{3.8250237987149973`*^9, 3.825023829388316*^9, 
  3.8250243759252787`*^9},
 CellLabel->
  "Out[392]=",ExpressionUUID->"67bb40c4-abb7-4758-b27a-66eb26903b91"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Further Analysis", "Section",
 CellChangeTimes->{{3.8250239043936415`*^9, 
  3.825023906549411*^9}},ExpressionUUID->"e002a42e-9242-4df3-adba-\
033a964c3313"],

Cell["Let\[CloseCurlyQuote]s compare this to our old weights:", "Text",
 CellChangeTimes->{{3.8250229602303505`*^9, 
  3.825022968339001*^9}},ExpressionUUID->"96edd8f0-73d4-4bc9-9a76-\
aaab1b65122b"],

Cell[CellGroupData[{

Cell[BoxData["weights"], "Input",
 CellChangeTimes->{{3.8250229723550253`*^9, 3.825022973371195*^9}},
 CellLabel->
  "In[393]:=",ExpressionUUID->"61d125c5-5ad6-4318-8a6b-f1a3a47c1417"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "\!\(\*SubscriptBox[\(w\), \(13\)]\)" -> 0.72, 
       "\!\(\*SubscriptBox[\(w\), \(14\)]\)" -> -0.31, 
       "\!\(\*SubscriptBox[\(w\), \(23\)]\)" -> 0.1, 
       "\!\(\*SubscriptBox[\(w\), \(24\)]\)" -> -0.92, 
       "\!\(\*SubscriptBox[\(w\), \(35\)]\)" -> -0.37, 
       "\!\(\*SubscriptBox[\(w\), \(36\)]\)" -> 0.43, 
       "\!\(\*SubscriptBox[\(w\), \(45\)]\)" -> -0.19, 
       "\!\(\*SubscriptBox[\(w\), \(46\)]\)" -> 0.78, 
       "\!\(\*SubscriptBox[\(b\), \(3\)]\)" -> 0.01, 
       "\!\(\*SubscriptBox[\(b\), \(4\)]\)" -> 0.38, 
       "\!\(\*SubscriptBox[\(b\), \(5\)]\)" -> -0.13, 
       "\!\(\*SubscriptBox[\(b\), \(6\)]\)" -> 0.78], "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[243.], 
         TypeSystem`PackageScope`AtomShape[60]]], 12, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "\!\(\*SubscriptBox[\(b\), \(3\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(4\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(5\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(6\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(13\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(14\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(23\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(24\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(35\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(36\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(45\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(46\)]\)"]], 
       TypeSystem`Atom[Real], 12], "Meta" -> Association[], "RowTarget" -> 20,
      "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[243.], 
         TypeSystem`PackageScope`AtomShape[60]]], 12, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "\!\(\*SubscriptBox[\(b\), \(3\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(4\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(5\)]\)", 
         "\!\(\*SubscriptBox[\(b\), \(6\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(13\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(14\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(23\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(24\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(35\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(36\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(45\)]\)", 
         "\!\(\*SubscriptBox[\(w\), \(46\)]\)"]], 
       TypeSystem`Atom[Real], 12], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 12, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     12, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(13\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(13\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(13\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(13\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.72"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(13\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(14\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(14\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(14\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(14\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.31"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(14\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(23\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(23\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(23\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(23\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(23\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(24\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(24\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(24\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(24\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.92"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(24\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(35\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(35\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(35\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(35\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.37"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(35\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(36\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(36\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(36\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(36\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.43"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(36\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(45\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(45\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(45\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(45\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(45\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(w\), \(46\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(w\), \(46\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(w\), \(46\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(46\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(w\), \(46\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(3\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(3\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(3\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(3\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.01"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(3\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(4\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(4\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(4\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(4\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.38"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(4\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(5\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(5\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(5\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(5\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.13"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(5\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["\!\(\*SubscriptBox[\(b\), \(6\)]\)", 
                  Style[
                  "\!\(\*SubscriptBox[\(b\), \(6\)]\)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SubscriptBox[\(b\), \(6\)]\)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(6\)]\)"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{243., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.78"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["\!\(\*SubscriptBox[\(b\), \(6\)]\)"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{339., {159., 165.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{339., {159., 165.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8250237989184165`*^9, 3.825024376133813*^9},
 CellLabel->
  "Out[393]=",ExpressionUUID->"bf644760-1ef7-4c58-abf0-da3283413ed7"]
}, Open  ]],

Cell["\<\
Our weights didn\[CloseCurlyQuote]t change that much? \
There\[CloseCurlyQuote]s a few reasons for this. Firstly, our classifier wasn\
\[CloseCurlyQuote]t *that* wrong to start with. Secondly, this is only a \
single instance --- if we had 100 instances, then we\[CloseCurlyQuote]d add \
all 100 changes together. 

We can see what output, we\[CloseCurlyQuote]d get with our new weights, \
though. All we have to do is do the forward pass again!\
\>", "Text",
 CellChangeTimes->{{3.8250228989589176`*^9, 3.8250229410471444`*^9}, {
  3.8250230026815853`*^9, 
  3.8250230311064386`*^9}},ExpressionUUID->"16de80f3-6dd7-4ca6-911a-\
dd45b6b44153"],

Cell[BoxData[
 TemplateBox[{
  "Set", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Dataset\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"updated\\\", \\\":\\\", RowBox[{\\\"Blank\\\", \
\\\"[\\\", RowBox[{\\\"Dataset\\\", RowBox[{\\\"[\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"12\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}]}], \
\\\"]\\\"}]}]\\) is Protected.\"", 2, 164, 18, 24750227456401735596, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.825022772119229*^9, 3.8250227800945487`*^9}, 
   3.825022823635928*^9, 3.8250228719854574`*^9},
 CellLabel->
  "During evaluation of \
In[164]:=",ExpressionUUID->"e8b31149-933a-4d68-ab18-825817560473"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nz", "3"], "=", " ", 
  RowBox[{
   RowBox[{
    SubscriptBox["nw", "13"], " ", "*", " ", 
    SubscriptBox["O", "1"]}], " ", "+", " ", 
   RowBox[{
    SubscriptBox["nw", "23"], " ", "*", " ", 
    SubscriptBox["O", "2"]}], " ", "+", " ", 
   SubscriptBox["nb", "3"]}]}]], "Input",
 CellChangeTimes->{{3.8250230640695724`*^9, 3.825023084602807*^9}, {
   3.825023750048642*^9, 3.8250237654191647`*^9}, 3.8250239370712423`*^9},
 CellLabel->
  "In[394]:=",ExpressionUUID->"0d3f5543-958f-499e-b21e-b9c898ac599b"],

Cell[BoxData["0.6568181256962708`"], "Output",
 CellChangeTimes->{3.825023998267063*^9, 3.825024376596244*^9},
 CellLabel->
  "Out[394]=",ExpressionUUID->"90f853a0-ec3d-4e78-957a-7b3fd2b961a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nz", "4"], "=", " ", 
  RowBox[{
   RowBox[{
    SubscriptBox["nw", "14"], " ", "*", " ", 
    SubscriptBox["O", "1"]}], " ", "+", " ", 
   RowBox[{
    SubscriptBox["nw", "24"], " ", "*", " ", 
    SubscriptBox["O", "2"]}], " ", "+", " ", 
   SubscriptBox["nb", "4"]}]}]], "Input",
 CellChangeTimes->{{3.8250238516705947`*^9, 3.825023869209779*^9}, 
   3.825023938518423*^9, {3.825023983817832*^9, 3.825023983994833*^9}},
 CellLabel->
  "In[395]:=",ExpressionUUID->"945ad3a7-fafb-4ff5-a4b3-547adf3c9196"],

Cell[BoxData["0.3022968880526051`"], "Output",
 CellChangeTimes->{3.825023999609436*^9, 3.8250243768407454`*^9},
 CellLabel->
  "Out[395]=",ExpressionUUID->"4139395d-2f94-4790-89f9-7f25dd7c74c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nO", "3"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["nz", "3"], "]"}]}]], "Input",
 CellChangeTimes->{{3.825023874742728*^9, 3.8250238792423854`*^9}, {
  3.825023927395115*^9, 3.825023993706256*^9}, {3.825024034041745*^9, 
  3.8250240800975685`*^9}},
 CellLabel->
  "In[396]:=",ExpressionUUID->"299f450a-0fcb-46e4-b3d5-966760fec3b3"],

Cell[BoxData["0.6585452627417498`"], "Output",
 CellChangeTimes->{3.8250243771673384`*^9},
 CellLabel->
  "Out[396]=",ExpressionUUID->"887c4b6f-68b2-498f-90b7-3b3b3eab2712"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nO", "4"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["nz", "4"], "]"}]}]], "Input",
 CellChangeTimes->{3.825024077137597*^9},
 CellLabel->
  "In[397]:=",ExpressionUUID->"68bd193b-c577-44d4-a553-a688351395ac"],

Cell[BoxData["0.5750039139492057`"], "Output",
 CellChangeTimes->{3.825024377319005*^9},
 CellLabel->
  "Out[397]=",ExpressionUUID->"db387c28-cac2-43de-9a90-272575d34548"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nz", "5"], "=", " ", 
  RowBox[{
   RowBox[{
    SubscriptBox["nw", "35"], " ", "*", " ", 
    SubscriptBox["nO", "3"]}], " ", "+", " ", 
   RowBox[{
    SubscriptBox["nw", "45"], " ", "*", " ", 
    SubscriptBox["nO", "4"]}], " ", "+", 
   SubscriptBox["nb", "5"]}]}]], "Input",
 CellChangeTimes->{{3.8250240644295197`*^9, 3.8250241213973837`*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"9f2b4ae6-4075-4bd8-a31e-d963b1d08aac"],

Cell[BoxData[
 RowBox[{"-", "0.6416201742679375`"}]], "Output",
 CellChangeTimes->{3.825024214381382*^9, 3.8250243774613223`*^9},
 CellLabel->
  "Out[398]=",ExpressionUUID->"93369580-67a9-4db7-b83c-46bd833b6849"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nz", "6"], "=", " ", 
  RowBox[{
   RowBox[{
    SubscriptBox["nw", "36"], " ", "*", " ", 
    SubscriptBox["nO", "3"]}], " ", "+", " ", 
   RowBox[{
    SubscriptBox["nw", "46"], " ", "*", " ", 
    SubscriptBox["nO", "4"]}], " ", "+", 
   SubscriptBox["nb", "6"]}]}]], "Input",
 CellChangeTimes->{{3.825024153409176*^9, 3.8250241619056945`*^9}},
 CellLabel->
  "In[399]:=",ExpressionUUID->"a7e35dd7-105f-43cc-a62c-17eba7022d73"],

Cell[BoxData["1.5590850466175588`"], "Output",
 CellChangeTimes->{3.8250242159206266`*^9, 3.825024377625702*^9},
 CellLabel->
  "Out[399]=",ExpressionUUID->"5fc7ee2b-5a00-41b3-9a4d-e96169fd881f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nO", "5"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["nz", "5"], "]"}]}]], "Input",
 CellChangeTimes->{{3.8250241768298283`*^9, 3.8250241885162888`*^9}},
 CellLabel->
  "In[400]:=",ExpressionUUID->"94112ce2-01ce-4b66-afd5-11e4ea0d5775"],

Cell[BoxData["0.34488038867073534`"], "Output",
 CellChangeTimes->{{3.8250241954613657`*^9, 3.8250242174678698`*^9}, 
   3.825024377758402*^9},
 CellLabel->
  "Out[400]=",ExpressionUUID->"1ef512a2-85bb-45ca-bf03-52b20be550d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["nO", "6"], "=", " ", 
  RowBox[{"LogisticSigmoid", "[", 
   SubscriptBox["nz", "6"], "]"}]}]], "Input",
 CellChangeTimes->{{3.8250241913647127`*^9, 3.8250241943053637`*^9}},
 CellLabel->
  "In[401]:=",ExpressionUUID->"b336bb8c-c90f-4623-93de-2c213c142ba2"],

Cell[BoxData["0.8262220239224316`"], "Output",
 CellChangeTimes->{
  3.825023799227768*^9, 3.8250238366551*^9, 3.82502386981399*^9, {
   3.825023994310937*^9, 3.825024001116847*^9}, 3.825024055825551*^9, 
   3.8250241223373485`*^9, 3.8250241624974236`*^9, {3.825024197206295*^9, 
   3.8250242202375593`*^9}, 3.825024377879393*^9},
 CellLabel->
  "Out[401]=",ExpressionUUID->"bc357dac-f602-41c4-be16-d15599dfe177"]
}, Open  ]],

Cell["\<\
So our output of node 5 changes from 0.382 to 0.345, and node 6 from 0.819 to \
0.826. Node 5 had a bigger change as it was further from the desired result \
of \[OpenCurlyQuote]0\[CloseCurlyQuote], than Node 6 was from \
\[OpenCurlyQuote]1\[CloseCurlyQuote].
If you repeated this process a bunch more times, you\[CloseCurlyQuote]d \
eventually approach outputs of 0 and 1 respectively!\
\>", "Text",
 CellChangeTimes->{{3.825024252812716*^9, 
  3.825024342580061*^9}},ExpressionUUID->"832b10ca-2e04-4bf1-9088-\
f1332ead1b1c"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1909, 1050},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"aef74454-d7a1-4db9-a12a-ab1e99c084d2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 198, 3, 98, "Title",ExpressionUUID->"834948b4-b79f-46b2-a3a1-bcd91549518f"],
Cell[781, 27, 183, 3, 53, "Subtitle",ExpressionUUID->"6fb6e7fa-c304-427d-a124-97414b9549b6"],
Cell[CellGroupData[{
Cell[989, 34, 105953, 1742, 358, "Input",ExpressionUUID->"d7cd3cb8-0567-471c-b081-b7ea46c875ee"],
Cell[106945, 1778, 201832, 3314, 362, 105871, 1740, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"a7c729bf-ead9-4c3b-9fb2-7bf11e1899c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[308814, 5097, 207, 4, 67, "Section",ExpressionUUID->"c9ce18e8-9c66-479c-8538-a872982a0f6d"],
Cell[309024, 5103, 650, 10, 122, "Text",ExpressionUUID->"d4dc9c44-0ef0-44df-853b-c2e0af24f3f1"],
Cell[CellGroupData[{
Cell[309699, 5117, 2265, 48, 28, "Input",ExpressionUUID->"16ff6dd3-69ca-4883-a002-5a8772db865f"],
Cell[311967, 5167, 49878, 894, 343, "Output",ExpressionUUID->"8a6c9127-db6b-4af7-be17-d95bfd4d0475"]
}, Open  ]],
Cell[361860, 6064, 194, 3, 34, "Text",ExpressionUUID->"a8c2be10-1991-4a08-a5c3-3470bdccaaca"],
Cell[CellGroupData[{
Cell[362079, 6071, 232, 5, 28, "Input",ExpressionUUID->"7ac39043-6665-4cbd-bf6b-effb0a7bdd2b"],
Cell[362314, 6078, 183, 3, 54, "Output",ExpressionUUID->"3d81e276-7937-428e-b817-22da17ce8bd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362534, 6086, 231, 5, 28, "Input",ExpressionUUID->"584cfffb-7de3-4116-9892-467cd2839e47"],
Cell[362768, 6093, 181, 3, 32, "Output",ExpressionUUID->"f6dbdb8b-8309-4059-bd52-106475472c6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362986, 6101, 190, 4, 48, "Input",ExpressionUUID->"e7269745-a8bf-478e-8938-9eb9fafdf6b7"],
Cell[363179, 6107, 181, 3, 32, "Output",ExpressionUUID->"2bfc5afa-378e-42dc-9a6f-b5a46492f43a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[363409, 6116, 207, 4, 67, "Section",ExpressionUUID->"cae38132-81cb-4c06-ae51-089f87c0a00d"],
Cell[363619, 6122, 235, 6, 34, "Text",ExpressionUUID->"88c8680f-da61-481b-b64e-e7119b5cbc1c"],
Cell[CellGroupData[{
Cell[363879, 6132, 281, 6, 28, "Input",ExpressionUUID->"98ce3a6e-b043-4ee4-a17c-f9a40edea737"],
Cell[364163, 6140, 182, 3, 32, "Output",ExpressionUUID->"b318b321-64bf-49f5-8f11-6030df78f93e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[364382, 6148, 327, 8, 28, "Input",ExpressionUUID->"6015aab0-c0ad-420e-b2b9-1c6f53e70c45"],
Cell[364712, 6158, 199, 4, 32, "Output",ExpressionUUID->"760d88fe-473d-4ba3-b2a5-ae65a3549094"]
}, Open  ]],
Cell[CellGroupData[{
Cell[364948, 6167, 174, 4, 28, "Input",ExpressionUUID->"797ab109-8d60-4cd1-a34c-3003ab0115f5"],
Cell[365125, 6173, 199, 4, 32, "Output",ExpressionUUID->"7106fb9c-ca1b-479a-9de5-a6b20ae4613d"]
}, Open  ]],
Cell[365339, 6180, 434, 10, 34, "Text",ExpressionUUID->"1fb9cbf7-0a6e-44e7-b19e-93e42cd624ae"],
Cell[CellGroupData[{
Cell[365798, 6194, 325, 8, 28, "Input",ExpressionUUID->"fc69c10c-8b19-40bd-ab6f-b5771bd2d78f"],
Cell[366126, 6204, 178, 3, 32, "Output",ExpressionUUID->"68ba7c16-af90-4cab-9146-a32c02ad65c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366341, 6212, 176, 5, 28, "Input",ExpressionUUID->"a5d37dcf-cbd4-4d53-bc16-2a04df70e401"],
Cell[366520, 6219, 199, 4, 32, "Output",ExpressionUUID->"be2365a3-d64d-4a7f-a581-f833d7418e35"]
}, Open  ]],
Cell[366734, 6226, 412, 8, 34, "Text",ExpressionUUID->"fa03a889-3890-4a84-8e0c-091edf6839f7"],
Cell[367149, 6236, 572, 13, 53, "Text",ExpressionUUID->"fe9b9893-8fec-428f-9ff7-c33f31e468f7"],
Cell[367724, 6251, 517, 12, 25, "Message",ExpressionUUID->"ec6b38a6-7a08-4ac4-b050-90528144b101"],
Cell[CellGroupData[{
Cell[368266, 6267, 589, 18, 28, "Input",ExpressionUUID->"24b340fc-b6c5-4f8a-ab0c-8fe1715f1adb"],
Cell[368858, 6287, 184, 3, 32, "Output",ExpressionUUID->"59635358-7ccb-4947-aa91-59999345a26a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369079, 6295, 589, 18, 28, "Input",ExpressionUUID->"55d37f3d-077f-4483-af56-6f9241c17f6f"],
Cell[369671, 6315, 196, 3, 32, "Output",ExpressionUUID->"72422ced-8a7e-49fb-8a4b-ed3d3ddf280d"]
}, Open  ]],
Cell[369882, 6321, 240, 6, 34, "Text",ExpressionUUID->"132aea20-2640-477f-9222-27f9d254c498"],
Cell[CellGroupData[{
Cell[370147, 6331, 224, 6, 28, "Input",ExpressionUUID->"f6373c1c-3dca-43f3-b990-10f564e24c47"],
Cell[370374, 6339, 191, 3, 32, "Output",ExpressionUUID->"ae96f4eb-b7c7-4ac5-9fed-8d3bca7f33ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370602, 6347, 224, 6, 28, "Input",ExpressionUUID->"952c964d-74cc-49a9-a773-267b02364b7c"],
Cell[370829, 6355, 193, 3, 32, "Output",ExpressionUUID->"3757f38b-b5f1-43fa-b5ee-e476164fb489"]
}, Open  ]],
Cell[CellGroupData[{
Cell[371059, 6363, 195, 3, 28, "Input",ExpressionUUID->"85ac1de7-29c4-448c-a7e1-ea2f832c8f35"],
Cell[371257, 6368, 197, 3, 32, "Output",ExpressionUUID->"3c2defb0-4390-4432-964d-5277e04babc7"]
}, Open  ]],
Cell[371469, 6374, 272, 6, 34, "Text",ExpressionUUID->"c2f990d2-f515-414b-a70b-e100e98cc100"],
Cell[CellGroupData[{
Cell[371766, 6384, 589, 18, 28, "Input",ExpressionUUID->"ee4db30a-bd10-4950-8e69-6dad378d059a"],
Cell[372358, 6404, 213, 4, 32, "Output",ExpressionUUID->"af402d6f-7cf6-4133-87fb-7becfebc200d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372608, 6413, 589, 18, 28, "Input",ExpressionUUID->"2ea6d818-81e2-4b21-9bc1-40eacef1f071"],
Cell[373200, 6433, 194, 3, 32, "Output",ExpressionUUID->"1514c884-0fee-4c6f-abdd-e916d4190cc7"]
}, Open  ]],
Cell[373409, 6439, 224, 5, 34, "Text",ExpressionUUID->"5125c0b1-7fd9-4a78-9b9e-69bceafee6f3"],
Cell[CellGroupData[{
Cell[373658, 6448, 224, 6, 28, "Input",ExpressionUUID->"4d79ddc2-52b9-4d17-9f72-eb6440bbb0b7"],
Cell[373885, 6456, 198, 3, 32, "Output",ExpressionUUID->"a5c6b1be-e32e-4373-a458-8bdb973e952b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374120, 6464, 224, 6, 28, "Input",ExpressionUUID->"f549d049-f4a5-4c80-84cd-fa9390692c0d"],
Cell[374347, 6472, 195, 3, 32, "Output",ExpressionUUID->"afd73107-0afd-46b1-bb39-a48a72cc0961"]
}, Open  ]],
Cell[374557, 6478, 248, 6, 34, "Text",ExpressionUUID->"0c6cd55c-a53a-4bde-bed6-8f80bc73c300"],
Cell[CellGroupData[{
Cell[374830, 6488, 309, 9, 28, "Input",ExpressionUUID->"dce52a07-e45f-4241-b56b-e98c03cdb231"],
Cell[375142, 6499, 187, 3, 32, "Output",ExpressionUUID->"c5160042-0ff2-463b-a44b-f293029b844a"]
}, Open  ]],
Cell[375344, 6505, 406, 8, 34, "Text",ExpressionUUID->"274b90e5-ecf3-4f2b-a4e4-e23a85132348"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375787, 6518, 215, 4, 67, "Section",ExpressionUUID->"59f87513-a0b0-4f04-8b08-10fbb54bc903"],
Cell[376005, 6524, 1983, 50, 103, "Text",ExpressionUUID->"6e73cba1-086c-4dbb-a819-759ef93c0f0d"],
Cell[CellGroupData[{
Cell[378013, 6578, 298, 7, 48, "Input",ExpressionUUID->"793ceb5b-3b7f-4e99-b636-edee6c0dddc8"],
Cell[378314, 6587, 175, 3, 32, "Output",ExpressionUUID->"bfb98ae7-c8c6-4aa9-9f4f-dcdba444ae11"],
Cell[378492, 6592, 175, 3, 32, "Output",ExpressionUUID->"702cb1f0-4f70-4e24-8d94-fbcdbe026522"]
}, Open  ]],
Cell[378682, 6598, 643, 15, 56, "Text",ExpressionUUID->"a3ce2594-3fc9-45a7-88ed-2830face324f"],
Cell[CellGroupData[{
Cell[379350, 6617, 297, 8, 28, "Input",ExpressionUUID->"d7a81d51-38cf-4fb1-9ad5-4867cf6d7031"],
Cell[379650, 6627, 213, 4, 32, "Output",ExpressionUUID->"58574af2-04d0-45cc-9d52-6d10458542ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379900, 6636, 295, 8, 28, "Input",ExpressionUUID->"74628a0e-db03-4258-9f6f-fa1e83e55033"],
Cell[380198, 6646, 197, 3, 32, "Output",ExpressionUUID->"28fab4c0-70b7-4624-90ec-c5b8b092835f"]
}, Open  ]],
Cell[380410, 6652, 387, 10, 57, "Text",ExpressionUUID->"34e4b2bc-95cc-4744-be5a-98d9aec2c83a"],
Cell[380800, 6664, 485, 15, 52, "Text",ExpressionUUID->"3adff472-f782-4823-9842-46c5a88aa22e"],
Cell[381288, 6681, 1085, 23, 122, "Text",ExpressionUUID->"40d3f60e-917d-41d0-bb4e-73071e82b900"],
Cell[CellGroupData[{
Cell[382398, 6708, 858, 26, 28, "Input",ExpressionUUID->"d25f52e8-4827-4462-b32e-c996c6b6f68b"],
Cell[383259, 6736, 196, 3, 32, "Output",ExpressionUUID->"02b45e65-8686-4c47-8d09-e034dca80069"]
}, Open  ]],
Cell[383470, 6742, 1318, 38, 122, "Text",ExpressionUUID->"ca0ad539-1902-4580-87c5-ff4144c25da5"],
Cell[CellGroupData[{
Cell[384813, 6784, 913, 27, 28, "Input",ExpressionUUID->"d93329e0-40bc-4815-ab03-f9991ba52b96"],
Cell[385729, 6813, 195, 3, 32, "Output",ExpressionUUID->"65ac8405-2b71-433a-bdd1-6423499a980e"]
}, Open  ]],
Cell[385939, 6819, 1194, 29, 56, "Text",ExpressionUUID->"db1f0d0a-2b38-421f-9ebf-c5e1f6b58b2a"],
Cell[387136, 6850, 531, 11, 34, "Text",ExpressionUUID->"41d538c2-f66c-4a33-9f27-90f0b647a1a2"],
Cell[387670, 6863, 453, 13, 34, "Text",ExpressionUUID->"419161b2-8c6d-4161-b264-05b6d2bffb68"],
Cell[388126, 6878, 825, 15, 122, "Text",ExpressionUUID->"29cde926-49d1-4bff-a03b-05824936b425"],
Cell[CellGroupData[{
Cell[388976, 6897, 212, 4, 28, "Input",ExpressionUUID->"6b52010b-1949-493c-89ec-c494470c4c1f"],
Cell[389191, 6903, 177, 3, 32, "Output",ExpressionUUID->"ddbc61d2-02c7-4e4f-a9f2-6d21945c4bd0"]
}, Open  ]],
Cell[389383, 6909, 385, 8, 34, "Text",ExpressionUUID->"8b7e4ba2-26cb-4c4d-8599-ad1a74945606"],
Cell[CellGroupData[{
Cell[389793, 6921, 453, 12, 28, "Input",ExpressionUUID->"96469a72-8683-4c7e-99a0-251501a3fcc2"],
Cell[390249, 6935, 199, 3, 32, "Output",ExpressionUUID->"db882745-74c5-4f2e-a3a7-52609d73bf3d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[390485, 6943, 455, 12, 28, "Input",ExpressionUUID->"93a5f147-504c-4498-826a-f1b56a7cada1"],
Cell[390943, 6957, 197, 3, 32, "Output",ExpressionUUID->"958fa297-c7a7-4d46-a423-bf9078615d3f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[391177, 6965, 457, 12, 28, "Input",ExpressionUUID->"52f8c09e-f478-4c16-814f-abec7e29e279"],
Cell[391637, 6979, 214, 4, 32, "Output",ExpressionUUID->"eb064015-b436-49f7-8477-ec3e2fc4b2cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[391888, 6988, 455, 12, 28, "Input",ExpressionUUID->"16fc1fdf-24f8-4ae0-8f89-f186401d7595"],
Cell[392346, 7002, 215, 4, 32, "Output",ExpressionUUID->"184cc60d-21f0-4f6b-bd66-90abedfbf0b4"]
}, Open  ]],
Cell[392576, 7009, 217, 5, 34, "Text",ExpressionUUID->"d88b673a-4ebd-464b-9c8f-848f19230e60"],
Cell[CellGroupData[{
Cell[392818, 7018, 455, 12, 28, "Input",ExpressionUUID->"8d15346c-a08c-40a6-b1df-b36ed1eeb8dc"],
Cell[393276, 7032, 211, 4, 32, "Output",ExpressionUUID->"a0f95f56-c8ba-4fac-a142-c1bb07ba4385"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393524, 7041, 453, 12, 28, "Input",ExpressionUUID->"57456fae-21b0-4b09-b899-b3aeee64d491"],
Cell[393980, 7055, 197, 3, 32, "Output",ExpressionUUID->"4d301a32-03fb-44fe-81de-7aaa4c7f5653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[394214, 7063, 453, 12, 28, "Input",ExpressionUUID->"079208ac-3173-4cae-9a94-fb9ff0c323b5"],
Cell[394670, 7077, 214, 4, 32, "Output",ExpressionUUID->"6fe7f9e3-30a3-48ab-81aa-5dfa48d3979f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[394921, 7086, 455, 12, 28, "Input",ExpressionUUID->"0c0ea68c-1e9b-4e21-96a2-7104f4eb7ac8"],
Cell[395379, 7100, 195, 3, 32, "Output",ExpressionUUID->"d3f96c8e-d05b-488c-8337-2296067e94a6"]
}, Open  ]],
Cell[395589, 7106, 844, 20, 120, "Text",ExpressionUUID->"a3b4f078-cc3b-4d3f-9e19-87ece6d3fe19"],
Cell[CellGroupData[{
Cell[396458, 7130, 462, 12, 48, "Input",ExpressionUUID->"1c1a4379-1750-476c-b7ba-408687d013f5"],
Cell[396923, 7144, 197, 3, 32, "Output",ExpressionUUID->"c33019e3-005a-4534-856c-206d553a0cee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397157, 7152, 418, 11, 28, "Input",ExpressionUUID->"fd7d9f22-cfad-44fb-8ff4-476e56be6ee8"],
Cell[397578, 7165, 197, 3, 32, "Output",ExpressionUUID->"f1dcb0cd-c833-454d-ae76-6b73d35a2d25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397812, 7173, 419, 11, 28, "Input",ExpressionUUID->"47af0f39-72bf-4976-adb5-750b88e09ddb"],
Cell[398234, 7186, 213, 4, 32, "Output",ExpressionUUID->"51ba481a-ae4a-4a04-bee7-aefe9a56a57b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398484, 7195, 423, 11, 28, "Input",ExpressionUUID->"001376a0-7b36-43a8-a3a6-2044ba89f319"],
Cell[398910, 7208, 197, 3, 32, "Output",ExpressionUUID->"32e30239-8db8-4f1d-8701-50000385d728"]
}, Open  ]],
Cell[399122, 7214, 273, 7, 34, "Text",ExpressionUUID->"ebd62156-603d-41ec-993c-c4d695ba96ca"],
Cell[CellGroupData[{
Cell[399420, 7225, 3528, 96, 242, "Input",ExpressionUUID->"e4996e1b-e27f-4053-b5e2-3b76e1740b50"],
Cell[402951, 7323, 220, 4, 32, "Output",ExpressionUUID->"9e653240-e75f-48a0-808e-c6a725a16164"],
Cell[403174, 7329, 238, 5, 32, "Output",ExpressionUUID->"5eae56f5-df41-427c-a539-b4ad499f3ecf"],
Cell[403415, 7336, 221, 4, 32, "Output",ExpressionUUID->"ee4b2974-b02c-4bb7-955b-0d4610b62d47"],
Cell[403639, 7342, 239, 5, 32, "Output",ExpressionUUID->"d04a4280-8013-4a2e-8f59-64489a7b93f6"],
Cell[403881, 7349, 240, 5, 32, "Output",ExpressionUUID->"49de8291-e38e-4277-837b-a8b538bdd862"],
Cell[404124, 7356, 222, 4, 32, "Output",ExpressionUUID->"ed45ebe1-27a1-4622-801a-fc0b10b33f3f"],
Cell[404349, 7362, 238, 5, 32, "Output",ExpressionUUID->"c5cf6415-7451-4434-bfea-66cb92924702"],
Cell[404590, 7369, 222, 4, 32, "Output",ExpressionUUID->"77b36020-b3d2-40be-aca2-dc0d3a65a3d6"],
Cell[404815, 7375, 224, 4, 32, "Output",ExpressionUUID->"dfec8638-237e-48a4-924b-2fbb02d9eed6"],
Cell[405042, 7381, 220, 4, 32, "Output",ExpressionUUID->"c3869f53-ad6d-4e07-aa21-ef4e221690c5"],
Cell[405265, 7387, 239, 5, 32, "Output",ExpressionUUID->"156637f6-87d1-40d0-a88e-77e3518d7469"],
Cell[405507, 7394, 221, 4, 32, "Output",ExpressionUUID->"67bb40c4-abb7-4758-b27a-66eb26903b91"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[405777, 7404, 163, 3, 67, "Section",ExpressionUUID->"e002a42e-9242-4df3-adba-033a964c3313"],
Cell[405943, 7409, 199, 3, 34, "Text",ExpressionUUID->"96edd8f0-73d4-4bc9-9a76-aaab1b65122b"],
Cell[CellGroupData[{
Cell[406167, 7416, 184, 3, 28, "Input",ExpressionUUID->"61d125c5-5ad6-4318-8a6b-f1a3a47c1417"],
Cell[406354, 7421, 49876, 894, 343, "Output",ExpressionUUID->"bf644760-1ef7-4c58-abf0-da3283413ed7"]
}, Open  ]],
Cell[456245, 8318, 652, 13, 78, "Text",ExpressionUUID->"16de80f3-6dd7-4ca6-911a-dd45b6b44153"],
Cell[456900, 8333, 661, 13, 25, "Message",ExpressionUUID->"e8b31149-933a-4d68-ab18-825817560473"],
Cell[CellGroupData[{
Cell[457586, 8350, 549, 14, 28, "Input",ExpressionUUID->"0d3f5543-958f-499e-b21e-b9c898ac599b"],
Cell[458138, 8366, 193, 3, 32, "Output",ExpressionUUID->"90f853a0-ec3d-4e78-957a-7b3fd2b961a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[458368, 8374, 545, 14, 28, "Input",ExpressionUUID->"945ad3a7-fafb-4ff5-a4b3-547adf3c9196"],
Cell[458916, 8390, 195, 3, 32, "Output",ExpressionUUID->"4139395d-2f94-4790-89f9-7f25dd7c74c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459148, 8398, 394, 9, 28, "Input",ExpressionUUID->"299f450a-0fcb-46e4-b3d5-966760fec3b3"],
Cell[459545, 8409, 173, 3, 32, "Output",ExpressionUUID->"887c4b6f-68b2-498f-90b7-3b3b3eab2712"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459755, 8417, 268, 7, 28, "Input",ExpressionUUID->"68bd193b-c577-44d4-a553-a688351395ac"],
Cell[460026, 8426, 171, 3, 32, "Output",ExpressionUUID->"db387c28-cac2-43de-9a90-272575d34548"]
}, Open  ]],
Cell[CellGroupData[{
Cell[460234, 8434, 472, 13, 28, "Input",ExpressionUUID->"9f2b4ae6-4075-4bd8-a31e-d963b1d08aac"],
Cell[460709, 8449, 212, 4, 32, "Output",ExpressionUUID->"93369580-67a9-4db7-b83c-46bd833b6849"]
}, Open  ]],
Cell[CellGroupData[{
Cell[460958, 8458, 470, 13, 28, "Input",ExpressionUUID->"a7e35dd7-105f-43cc-a62c-17eba7022d73"],
Cell[461431, 8473, 195, 3, 32, "Output",ExpressionUUID->"5fc7ee2b-5a00-41b3-9a4d-e96169fd881f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[461663, 8481, 296, 7, 28, "Input",ExpressionUUID->"94112ce2-01ce-4b66-afd5-11e4ea0d5775"],
Cell[461962, 8490, 226, 4, 32, "Output",ExpressionUUID->"1ef512a2-85bb-45ca-bf03-52b20be550d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462225, 8499, 296, 7, 28, "Input",ExpressionUUID->"b336bb8c-c90f-4623-93de-2c213c142ba2"],
Cell[462524, 8508, 413, 7, 32, "Output",ExpressionUUID->"bc357dac-f602-41c4-be16-d15599dfe177"]
}, Open  ]],
Cell[462952, 8518, 536, 10, 56, "Text",ExpressionUUID->"832b10ca-2e04-4bf1-9088-f1332ead1b1c"]
}, Open  ]]
}, Open  ]]
}
]
*)

